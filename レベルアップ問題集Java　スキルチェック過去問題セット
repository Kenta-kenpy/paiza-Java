<Dランク>
// Eメールアドレス
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // ローカル部を入力として取得
        String s = sc.nextLine();
        // ドメインを入力として取得
        String t = sc.nextLine();
        
        // ローカル部とドメインを"@"で繋いで出力
        System.out.println(s + "@" + t);
    }
}
/*String s = sc.nextLine();
標準入力から1行目を読み取り、それをローカル部として文字列sに格納します。
String t = sc.nextLine();
標準入力から2行目を読み取り、それをドメインとして文字列tに格納します。
System.out.println(s + "@" + t);
ローカル部sとドメインtを@で結合し、その結果を出力します。
nextLine()を使用する理由:
改行区切りで文字列を入力するので、nextLine()を使って1行単位でデータを読み取ります。
+演算子の使用:
+演算子は文字列同士を連結する際に利用されます。s + "@" + t の結果は結合された文字列です。*/

// N倍の文字列
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        // 入力を整数として取得
        int N = sc.nextInt();

        // for文を使用してN個の"*"を出力
        for (int i = 0; i < N; i++) {
            System.out.print("*");
        }
        // 改行
        System.out.println();
    }
}
/*Scannerの使用: sc.nextInt() を使用して整数として入力を取得します。Integer.parseIntは文字列を整数に変換しますが、sc.nextInt()を使用すればそのまま整数を取得可能です。
文字列の繰り返し: Javaでは*のような文字列の繰り返しにString.repeatメソッドを使用します。このメソッドは、指定した回数分文字列を繰り返して新しい文字列を生成します。*/

// 宿泊の日程
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を受け取るための Scanner を用意
        Scanner sc = new Scanner(System.in);

        // 1 行目: 休暇日数 n
        int n = sc.nextInt();

        // 2 行目: 移動日数 m
        int m = sc.nextInt();

        // 宿泊が必要な日数 = 休暇日数 - 移動日数
        int result = n - m;

        // 結果を1行で出力（末尾に改行）
        System.out.println(result);

        // Scanner を閉じる（メモリ節約）
        sc.close();
    }
}
/*Scanner で標準入力から2つの整数を読み取ります。
宿泊日数は単純に n - m で計算します。
最後は System.out.println() で出力するので、自動的に改行が入ります。*/

// 水分補給
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 標準入力から整数 n を読み取る
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        // 15分ごとの飲水量(ml)
        int per15min = 200;

        // 必要な水の量 = (n ÷ 15) × 200
        int capacity = (n / 15) * per15min;

        // 結果を出力（末尾に改行）
        System.out.println(capacity);

        sc.close();
    }
}
/*15分あたり200ml必要なので、
必要量 = (n ÷ 15) ×200*/

// 文字列の最後
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 標準入力から文字列Sを受け取る
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();

        // 最後の1文字を取得
        char lastChar = S.charAt(S.length() - 1);

        // 出力（末尾に改行）
        System.out.println(lastChar);

        sc.close();
    }
}
/*入力文字列 S の長さは S.length() で取得できます。
最後の1文字はインデックス S.length() - 1 で取得できます。*/
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<Cランク>
// 検索履歴
import java.util.HashSet;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        String[] words = new String[n];

        for (int i = 0; i < n; i++) {
            words[i] = sc.next();
        }

        HashSet<String> appear = new HashSet<>();

        for (int i = n - 1; i >= 0; i--) {
            if (appear.contains(words[i])) {
                continue;
            }
            System.out.println(words[i]);
            appear.add(words[i]);
        }
    }
}
/*連結リスト等のデータ構造を用いて、問題文にある通りに履歴を作ってもよいのですが、以下のようにすると簡単に解くことが出来ます。
検索ワードを W_N から W_1 まで逆順に見ていき、そのワードが既出でなければ出力する。HashSet に既出の検索ワードを格納しておくことにより、検索ワードが既出かどうかを調べられるようにしています。*/

// 単語のカウント
step2 「単語のカウント」を解くために part1
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行の入力を取得
        String input = scanner.nextLine();
        
        // 半角スペースで分割
        String[] wordList = input.split(" ");
        
        // 各単語を改行区切りで出力
        for (String word : wordList) {
            System.out.println(word);
        }
        
        scanner.close();
    }
}
/*入力された単語を配列やリストに格納します。
配列やリストの名前に特に決まりはありませんが、この解説では、単語(word)の一覧(lsit)であることを表現する意図を持ってword_listと名付けています。
繰り返し処理を用いて、その配列やリストの要素を順に出力します。*/

step3 「単語のカウント」を解くために part2
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行の入力を取得
        String input = scanner.nextLine();
        
        // 半角スペースで分割
        String[] wordList = input.split(" ");
        
        // "red" が含まれているかチェック
        boolean found = false;
        for (String word : wordList) {
            if (word.equals("red")) {
                found = true;
                break;
            }
        }
        
        // 結果を出力
        if (found) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
        
        scanner.close();
    }
}
/*Scanner クラスを使用して、標準入力（コンソール）から1行の文字列を読み取ります。
nextLine() メソッドは改行までの文字列をすべて取得します。split(" ") メソッドを使用し、入力文字列を 半角スペース で区切り、単語ごとに String 型の配列 wordList に格納します。
found という boolean 型の変数を false に初期化します。
for 文を使用し、wordList の各単語を順番に調べます。
if (word.equals("red")) で、単語が "red" と完全一致するかを判定します。
"red" が見つかった場合、found を true に変更し、break でループを終了します（これにより、無駄なループを避けます）。
if 文で found の値を確認します。"red" が見つかっていたら "Yes" を出力します。見つからなかったら "No" を出力します。*/

step4 「単語のカウント」を解くために part3
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行の入力を取得
        String input = scanner.nextLine();
        
        // 半角スペースで分割
        String[] wordList = input.split(" ");
        
        // 出現した単語を記録するセット
        Set<String> seenWords = new HashSet<>();
        
        // 各単語を処理
        for (String word : wordList) {
            if (seenWords.contains(word)) {
                System.out.println("already_been");
            } else {
                System.out.println(word);
                seenWords.add(word);
            }
        }
        
        scanner.close();
    }
}
/*orderという配列やリストを用意します。
　　入力された単語を入力された順番(order)で格納していくので、orderと名付けています。
条件分岐を用いて以下のような処理をします
　　もし、与えられた単語が既にorderに含まれていれば、その単語は既出なので、already_beenという文字列を出力します。
　　もし、与えられた単語がまだorderに含まれていなければ、その単語を出力します。
　　この時、次に同じ単語が入力された時に正しく分岐されるよう、入力された単語をorderに追加します。*/

step5 「単語のカウント」を解くために part4
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行の入力を取得
        String input = scanner.nextLine();
        
        // 半角スペースで分割
        String[] wordList = input.split(" ");
        
        // 出現した単語を記録するセット
        Set<String> seenWords = new LinkedHashSet<>();
        
        // 単語をセットに追加
        for (String word : wordList) {
            seenWords.add(word);
        }
        
        // 結果を出力
        for (String word : seenWords) {
            System.out.println(word);
        }
        
        scanner.close();
    }
}
/*orderという配列やリストを用意します。
　　入力された単語を入力された順番(order)で格納していくので、orderと名付けています。
もし、与えられた単語がまだorderに含まれていなければ、その単語をorderに追加し、出力します
　　（今回の問題では、与えられた単語が既にorderに含まれている場合にしなければならない処理は存在しません。）*/

step6 「単語のカウント」を解くために part5
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行の入力を取得
        String input = scanner.nextLine();
        
        // 半角スペースで分割
        String[] wordList = input.split(" ");
        
        // 出現した単語を記録するセット
        LinkedHashSet<String> uniqueWords = new LinkedHashSet<>();
        
        // 単語をセットに追加
        for (String word : wordList) {
            uniqueWords.add(word);
        }
        
        // ユニークな単語を出力
        for (String word : uniqueWords) {
            System.out.println(word);
        }
        
        // 出現回数（すべて1）をリストに格納し出力
        List<Integer> counts = new ArrayList<>(Collections.nCopies(uniqueWords.size(), 1));
        for (int count : counts) {
            System.out.println(count);
        }
        
        scanner.close();
    }
}
/*入力された単語を一度だけ出力し、その後に各単語の種類の数だけ "1" を出力するようになっています。*/

step7 「単語のカウント」を解くために part6
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 一行目の入力を取得し、半角スペースで分割
        String[] wordList = scanner.nextLine().split(" ");
        
        // 二行目の入力を取得
        String target = scanner.nextLine();
        
        // 指定された文字列の最初の出現位置を検索
        int index = -1;
        for (int i = 0; i < wordList.length; i++) {
            if (wordList[i].equals(target)) {
                index = i;
                break;
            }
        }
        
        // 結果を出力
        System.out.println(index);
        
        scanner.close();
    }
}
/*入力された単語のリストから指定された単語の最初の出現位置を見つけ、そのインデックスを出力します。*/

step8 「単語のカウント」を解くために part7
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 入力された文字列を読み込む
        String input = sc.nextLine();
        
        // スペースで区切られた単語をリストに分割
        String[] words = input.split(" ");
        
        // 出現回数を記録するためのMap
        Map<String, Integer> wordCount = new LinkedHashMap<>();
        
        // 単語を一つずつ処理
        for (String word : words) {
            // すでにMapに存在する単語なら回数を増加、無ければ新たに追加
            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
        }
        
        // 単語を出現順に出力
        for (String word : wordCount.keySet()) {
            System.out.println(word);
        }
        
        // 単語の出現回数を出現順に出力
        for (int count : wordCount.values()) {
            System.out.println(count);
        }
        
        sc.close();
    }
}
/*入力から、既にorderに含まれている単語が与えられた場合、countの数を1増やします。そうすることで単語の出現回数を数えます。
「既にorderに含まれている単語が与えられた場合」と「orderに含まれていない単語が与えられた場合」で処理を分岐させます。
　　既にorderに含まれている単語が与えられた場合、countの数を1増やします。
　　このとき、countの中の何番目の数字がどの単語に対応しているかを分かるようにしておく必要があります。
　　そのため、orderの中の単語の順番と、countの中の数字の順番を対応させる必要があります。
　　例えば、入力例1のケースでは、orderの 0 番目に "red" が保存されているので、countの 0 番目に "red" の出現回数を保存します。*/

step1  単語のカウント（力試し編）・final 単語のカウント
import java.util.ArrayList;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        ArrayList<String> words = new ArrayList<>();
        ArrayList<Integer> counter = new ArrayList<>();

        while (sc.hasNext()) {
            String word = sc.next();
            int index = words.indexOf(word);
            if (index == -1) {
                words.add(word);
                counter.add(1);
            } else {
                counter.set(index, counter.get(index) + 1);
            }
        }

        for (int i = 0; i < words.size(); i++) {
            System.out.println(words.get(i) + " " + counter.get(i));
        }
    }
}
/*英単語を出現した順番で保存しておく配列と、その出現回数を記録する配列を用意し、英単語を順に見ていきながら処理していけばよいです。
ArrayList を用いて、出現する英単語とその出現回数を保存する可変長の配列を用意しています。
ArrayList クラスの indexOf メソッドを用いると、指定した要素が格納されているインデックスを取得することが出来ます。指定した要素が格納されていない場合は、-1 が返ります。*/

// 宝くじ
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int b = sc.nextInt();

        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();

            String result = "blank";
            if (a == b) {
                result = "first";
            } else if (Math.abs(a - b) == 1) {
                result = "adjacent";
            } else if (a % 10000 == b % 10000) {
                result = "second";
            } else if (a % 1000 == b % 1000) {
                result = "third";
            }

            System.out.println(result);
        }
    }
}
/*宝くじの番号を整数値として処理すると、当たりかどうかの判定を簡単に行うことができます。
Math クラスの abs メソッドを用いると、絶対値を取得することが出来ます。
当選番号と宝くじの番号の下 4 桁が一致しているかどうかを確認するには、両者を 10000 で割った余りを比較すればよいです。下 3 桁についても同様に、1000 で割った余りを比較すればよいです。*/

// 野球の審判
step2 「野球の審判」を解くために part1
import java.util.*;


public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(n);
    }
}
/*標準入力を用いて、入力を受け取ります。
このとき、整数型で受け取ると、この先の実装がスムーズに進みます。
受け取った値を変数に代入します。
変数の名前に特に決まりはありませんが、この入力について問題文中で N と表記されているので、実装例では変数名も N にして、合わせています。
他の名付け方としては「投球」や「投球数」を想起できる英語表現を採用するパターンもあります。
その場合、pitch や number_of_pitches などの候補が挙がるでしょう。
変数の値を標準出力します。*/

step3 「野球の審判」を解くために part2
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            System.out.println("strike or ball");
        }
    }
}
/*標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。【ここまでが前の問題でやった内容です】
N 回実行される繰り返し処理を書きます。
繰り返し処理の中で strike or ball という文字列を出力します。*/

step4 「野球の審判」を解くために part3
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            System.out.println(s);
        }
    }
}
/*標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。【ここまでが前の問題でやった内容です】
　　4 ~ 6 の手順が N 回実行されるように書きます
入力を 1 行受け取ります。(strike か ball が入力されます)
受け取った値を変数に代入します。（実装例では変数名を s としています。）
変数の値を出力します。*/

step5 「野球の審判」を解くために part4
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            if (s.equals("strike")){
                System.out.println("strike!");
            } else {
                System.out.println(s);
            }
        }
    }
}
/*標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
入力を 1 行受け取ります。(strike か ball が入力されます)
受け取った値を変数に代入します。【ここまでが前の問題でやった内容です】
5 の変数の値によって処理が変わる条件分岐を書きます。
　　もし、変数の値が "strike" ならば "strike!" を出力します
　　そうでないならば、変数の値をそのまま出力します*/

step6 「野球の審判」を解くために part5
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int strike_count = 0;

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            if (s.equals("strike")){
                strike_count++;
                System.out.println("strike!");
                System.out.println(strike_count);
            } else {
                System.out.println(s);
            }
        }
    }
}
/*1標準入力を用いて、入力を受け取ります。
2受け取った値を変数に代入します。
3N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
4入力を 1 行受け取ります。(strike か ball が入力される)
5受け取った値を変数に代入します。
6 5の変数の値によって処理が変わる条件分岐を書きます。【ここまでが前の問題でやった内容です】
　　もし、変数の値が strike ならば strike! を出力します
　　そうでないならば、変数の値をそのまま出力します
7 ループの処理が始まる前に、strikeの数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を strike_count としています。
　　何も受け取っていない（１球も投げていない）段階では strike は 0 個なので、変数に 0 を代入します。
8 6で作った条件分岐で 「strike だった場合に実行される処理」に以下の処理を加えます
　　・7 で作った変数の値に +1 する処理
　　　　プログラムのこの部分が実行されるということは、今回の投球結果が strike だったということなので、「strike の数を数える変数」の値に 1 を足します。
　　・7 で作った変数の値を出力する
　　　　このとき、先に足してから、そのあと出力されるよう、順番に留意して書いてください。*/

step7 「野球の審判」を解くために part6
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int strike_count = 0;

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            if (s.equals("strike")){
                strike_count++;
                if (strike_count == 3) {
                    System.out.println("out!");
                } else {
                    System.out.println("strike!");
                }
            } else {
                System.out.println(s);
            }
        }
    }
}
/*1標準入力を用いて、入力を受け取ります。
2受け取った値を変数に代入します。
3N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
4入力を 1 行受け取ります。(strike か ball が入力される)
5受け取った値を変数に代入します。
6 5の変数の値によって処理が変わる条件分岐を書きます。
　　もし、変数の値が strike ならば strike! を出力します
　　そうでないならば、変数の値をそのまま出力します
7 ループの処理が始まる前に、strikeの数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を strike_count としています。
　　何も受け取っていない（１球も投げていない）段階では strike は 0 個なので、変数に 0 を代入します
8 6で作った条件分岐で 「strike だった場合に実行される処理」に以下の処理を加えます。
　　・7 で作った変数に +1 する処理【ここまでが前の問題でやった内容です】
　　・もし、7 で作った変数の値が 3 であれば、out! と出力し、そうでないならば strike! と出力する条件分岐*/

step1  野球の審判（力試し編）・final 野球の審判
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int ball_count = 0;
        int strike_count = 0;

        for (int i = 0; i < n; i++) {
            String s = sc.next();
            if (s.equals("strike")) {
                strike_count++;
                if (strike_count == 3) {
                    System.out.println("out!");
                } else {
                    System.out.println("strike!");
                }
            } else {
                ball_count++;
                if (ball_count == 4) {
                    System.out.println("fourball!");
                } else {
                    System.out.println("ball!");
                }
            }
        }
    }
}
/*標準入力を用いて、入力を受け取ります。
受け取った値を変数に代入します。
N 回実行される繰り返し処理を書きます。
　　4 ~ 6 の手順が N 回実行されるように書きます。
入力を 1 行受け取ります。(strike か ball が入力される)
受け取った値を変数に代入します。
5 の変数の値によって処理が変わる条件分岐を書きます。
　　もし、変数の値が strike ならば strike! を出力します
　　そうでないならば、変数の値をそのまま出力します
ループの処理が始まる前に、strikeの数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を strike_count としています。
　　何も受け取っていない（１球も投げていない）段階では strike は 0 個なので、変数に 0 を代入します
6 で作った条件分岐で 「strike だった場合に実行される処理」に以下の処理を加えます。【ここまでが前の問題でやった内容です】
　　・7 で作った変数の値に +1 する処理
　　・もし、7 で作った変数の値が 3 であれば、out! と出力し、そうでないならば strike! と出力する条件分岐
　　条件分岐の中に条件分岐を書きます。
ループの処理が始まる前に、ball の数を数えるための変数を用意し、0 を代入します
　　実装例では変数名を ball_count としています。
6 で作った条件分岐に「strike でなかった場合に実行される処理」に以下の処理を追加します
　　・9 で作った変数の値に +1 する処理
　　・もし、9 で作った変数の値が 4 であれば、fourball! と出力し、そうでないならば ball! と出力する条件分岐*/

// みかんの仕分け
step2 「みかんの仕分け」を解くために part1
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Scannerで入力を受け取る
        Scanner scanner = new Scanner(System.in);

        // 1行目のNとMを取得
        int N = scanner.nextInt();
        int M = scanner.nextInt();

        // 1行目を出力
        System.out.println(N + " " + M);

        // 次のM行にわたってみかんの重さw_iを取得して出力
        for (int i = 0; i < M; i++) {
            int weight = scanner.nextInt();
            System.out.println(weight);
        }
    }
}
/*1標準入力を用いて、入力を受け取ります。
　　このとき、整数型で受け取ると、この先の実装がスムーズに進みます。
　　1 行目の入力は空白区切りで 2 つ与えられることに注意しましょう。
2受け取った値をそれぞれ変数に代入します。
　　変数の名前に特に決まりはありませんが、この入力について問題文中で N M と表記されているので、実装例では変数名も N M にして、合わせています。
3変数の値を空白区切りで標準出力します。
4M 回実行される繰り返し処理を書きます。
　　5 ~ 7 の手順が M 回実行されるように書きます
5標準入力を用いて、入力を受け取ります。
6受け取った値を変数に代入します。（実装例では変数名を w としています）
7変数の値を標準出力します。*/

step3 「みかんの仕分け」を解くために part2
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Scannerで入力を受け取る
        Scanner scanner = new Scanner(System.in);

        // 1行目のNとMを取得
        int N = scanner.nextInt();
        int M = scanner.nextInt();

        // 次のM行にわたってみかんの重さw_iを取得
        for (int i = 0; i < M; i++) {
            int weight = scanner.nextInt();
            
            // Nの倍数かどうか判定して出力
            if (weight % N == 0) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
/*1 1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 M 回実行される繰り返し処理を書きます。
　　3 ~ 4 の手順が M 回実行されるように書きます
3 標準入力を用いて入力を受け取り、受け取った値を変数に代入します。
4 3 で受け取った変数の値によって処理が変わる条件分岐を書きます。
　　変数の値が N の倍数なら Yes を出力する。
　　　　変数の値を N で割った余りが 0 であればその値は N の倍数です。
　　そうでないなら No を出力する。*/

step4 「みかんの仕分け」を解くために part3
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Scannerで入力を受け取る
        Scanner scanner = new Scanner(System.in);

        // 1行目のNとMを取得
        int N = scanner.nextInt();
        int M = scanner.nextInt();

        // 2行目の箱に書かれた重さk_1, k_2を取得
        int k1 = scanner.nextInt();
        int k2 = scanner.nextInt();

        // 次のM行にわたってみかんの重さw_iを取得
        for (int i = 0; i < M; i++) {
            int weight = scanner.nextInt();

            // みかんの重さw_iとk_1、k_2の差を計算
            int dist1 = Math.abs(weight - k1);
            int dist2 = Math.abs(weight - k2);

            // 距離が小さい方に仕分ける
            if (dist1 < dist2) {
                System.out.println(k1);
            } else if (dist1 > dist2) {
                System.out.println(k2);
            } else {
                // 距離が同じなら、大きい箱に仕分ける
                System.out.println(k2);
            }
        }
    }
}
/*1 1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 2行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。（実装例では変数名を k1, k2 としています）
3 M 回実行される繰り返し処理を書きます。
　　4 ~ 5 の手順が M 回実行されるように書きます
4 標準入力を用いて入力を受け取り、受け取った値を変数に代入します。（実装例では変数名を w としています）
5 4で受け取った変数の値が 2 で受け取った変数のどちらに近いかを判定する条件分岐を書きます。
　　箱に書かれた数とみかんの重さの差の絶対値が小さいほど、みかんの重さはその箱の数に近いといえます。
　　・ k1 の方が k2 よりも w に近いなら、つまり k1 - w の絶対値が k2 - w の絶対値より小さいなら k1 の値 を出力します。
　　・ そうでないなら k2 の値 を出力します。
　　　　重さが一番近い箱が複数ある場合、数が大きい方の箱に仕分けられることに注意してください。条件より k_1 < k_2 なので、k1 - w の絶対値が k2 - w の絶対値が等しいなら k2 の値 を出力します。*/

step5 「みかんの仕分け」を解くために part4
import java.util.Scanner;

public class Main{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 1 行目の入力を受け取る
        int N = sc.nextInt();
        int M = sc.nextInt();
        
        // 2 行目の箱の個数 P を受け取る
        int P = sc.nextInt();
        
        // 3 行目の箱に書かれた重さ k_1, k_2, ..., k_P をリストに格納
        int[] K = new int[P];
        for (int i = 0; i < P; i++) {
            K[i] = sc.nextInt();
        }
        
        // M 回実行される繰り返し処理
        for (int i = 0; i < M; i++) {
            // みかんの重さ w を入力
            int w = sc.nextInt();
            
            // 最も近い箱を格納する変数 ans (初期値として絶対に答えにならない数)
            int ans = -100000;  // -100000 は絶対に答えにならない値
            
            // 箱の数だけ繰り返し処理
            for (int j = 0; j < P; j++) {
                int k_i = K[j];
                
                // k_i が N の倍数であるなら
                if (k_i % N == 0) {
                    // みかんの重さ w と箱 k_i の差を絶対値で比較
                    if (Math.abs(k_i - w) <= Math.abs(ans - w)) {
                        // より近い箱を見つけたら ans を更新
                        ans = k_i;
                    }
                }
            }
            
            // 答えとなる箱を出力
            System.out.println(ans);
        }
        
        sc.close();
    }
}
/*1 1 行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 2行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。
3 3行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。
　　このとき配列に格納しておくと、この先の実装がスムーズに進みます。（実装例では配列名を K としています）
4 M回実行される繰り返し処理を書きます。
　　5 ~ 10 の手順が M 回実行されるように書きます
5標準入力を用いて入力を受け取り、受け取った値を変数に代入します。
6これまでにみた箱に書かれた数字のうち、みかんの重さに最も近いものを格納する変数を用意します。（実装例では変数名を ans としています）
　　変数の初期値として絶対に答えにならない数値を入れておきます。（実装例では初期値を -10000 としています）
7 P回実行される繰り返し処理を書きます。（実装例ではループ変数を i としています）
　　8 ~ 9 の手順が P 回実行されるように書きます
8 3で受け取った配列 K の i 番目の値によって処理が変わる条件分岐を書きます。（配列 K の i 番目の値を k_i と表します）
　　・ k_i が N の倍数であるなら 9 の処理を続けます。
　　・ そうでないなら、なにもしません。
9 k_i が N の倍数であるなら、現在の解答候補よりみかんの重さに近い箱であるかを確認します。
　　・ k_i と w の差の絶対値が ans と w の差の絶対値以下であるなら、ans を k_i で更新します。
　　　　条件より配列 K の値は昇順であり、重さが一番近い箱が複数ある場合は数が大きい方の箱に仕分けられます。そのため、ans と w の差の絶対値"未満"ではなく"以下"とすることに注意してください。
　　・ そうでないなら、なにもしません。
ans の値を出力します。
6 では、より厳密には、変数の初期値として絶対に答えにならない かつ 実際の解答に影響を与えない数値を選ぶ必要があります。
例えば ans の初期値に -1 を選んだ場合は N = 5, w = 1, K = [ 5, 10, 15 ] の場合に、 9 の処理で ans が更新されることがなく初期値の -1 を誤って出力してしまいます。*/

step6 「みかんの仕分け」を解くために part5
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 入力の読み込み
        int N = scanner.nextInt();  // N: 箱番号の倍数
        int M = scanner.nextInt();  // M: みかんの個数 (1)
        int w = scanner.nextInt();  // w: みかんの重さ
        
        // 1 から 1500 までの範囲で、N の倍数を調べる
        List<int[]> results = new ArrayList<>();
        
        for (int y = N; y <= 1500; y += N) {
            // 箱番号 y とみかんの重さ w の差の絶対値
            int z = Math.abs(w - y);
            results.add(new int[]{y, z});
        }
        
        // 結果の出力
        for (int[] result : results) {
            System.out.println(result[0] + " " + result[1]);
        }
    }
}
/*1 1行目の入力を標準入力を用いて受け取り、受け取った値をそれぞれ変数に代入します。
2 2行目の入力を標準入力を用いて受け取り、受け取った値を変数に代入します。（実装例では変数名を w としています）
3 1500 回実行される処理を書きます。
　　ループ変数が 1 から 1500 まで 1 ずつ増加するようにし、4 の処理が 1500 回実行されるようにします。
4 ループ変数の値によって処理が変わる条件分岐を書きます。
　　・ ループ変数が N の倍数であるなら、「ループ変数」と「 w とループ変数の差の絶対値」を空白区切りで出力します。
　　・ そうでないならなにもしません
ここからは、元の問題「みかんの仕分け」について、どのくらい大きい数字が書かれた箱まで調べたらよいかを考えます。
まず、元の問題は「みかんの重さに一番近い数が書かれた箱」を探す問題でした。
そしてこの問題の出力を見てみると、どのテストケースでも箱に書かれた数が 1 ~ 1100くらい の範囲に「箱に書かれた数字と w の差の絶対値」が最小となる箱、つまり元の問題の答えとなる箱が存在していることがわかります。
よって、元の問題では 1100 までの箱を調べれば十分です。
このような考え方で十分ですが、以下により詳しい考え方を示します。詳しく知りたい方やあまりピンとこない方は参考にしてください。
みかんの重さを w とします。
1 この問題の出力をみると次のことがわかります
　　・ 箱に書かれた数字が w より小さいとき、箱に書かれた数字が大きくなるほど「箱に書かれた数字と w の差の絶対値」は小さくなる
　　・ 箱に書かれた数字が w 以上のとき、箱に書かれた数字が大きくなるほど「箱に書かれた数字と w の差の絶対値」は大きくなる
2 1 より、次のことがわかります。
　　みかんの重さより小さい数のなかで最大の N の倍数が書かれたの箱 か みかんの重さ以上の数の中で最小の N の倍数が書かれた箱 のどちらかが、「箱に書かれた数字と w の差の絶対値」が最も小さくなる。つまり、答えになる箱はこのどちらかである。
　　例えば N = 10, w = 22 のとき、みかんの重さより小さい数のなかで最大の N の倍数は 20、みかんの重さ以上の数の中で最小の N の倍数は 30 です。
3 2 より、答えになる可能性がある最大の数は「みかんの重さ以上の数の中で最小の N の倍数」であるとわかります。
4調べる数の上限は答えになる可能性がある最大の数です。みかんの重さによって調べる数の上限を変えてもよいですが少し実装が複雑になるため、すべての入力に対して 1 つの上限を考えます。
　　「みかんの重さ以上の数の中で最小の N の倍数」が最大になるときはみかんの重さが最大になるときであるため、みかんの重さの最大値 w = 1000 のときについて考えればよいです。
　　このとき「みかんの重さ以上の数の中で最小の N の倍数」は 「 1000 以上の数で最小の N の倍数」と言い換えることができます。
　　ここで、1000 以上 1100 以下の数の中に N ( 1 ≦ N ≦ 100 ) の倍数は必ず 1 つ以上存在します。（ i 番目の N の倍数と i + 1 番目の N の倍数の差は N であり、条件より N ≦ 100 であるため）
5 4 より、調べる数の上限は 1100 で十分であることがわかります。*/

step1  みかんの仕分け（力試し編）・final みかんの仕分け
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N;
        N = sc.nextInt();
        int M;
        M = sc.nextInt();

        for (int i = 0; i < M; i++) {
            int x;
            x = sc.nextInt();
            int ans = -100000;
            for (int w = 1; w <= 1200; w++) {
                if (w % N != 0) continue;
                if (Math.abs(x - w) <= Math.abs(x - ans)) ans = w;
            }
            System.out.println(ans);
        }
    }
}
/*みかんの重さが最大で 1000 程度なので、みかんを入れる箱の候補は 1 ~ 1200 の箱です。
( N が最大 100 より、1100 の箱とかも候補になるので、余分に調べることにする )
各みかんごとにどの箱に入れるのが良いかを計算することができます。
みかん 1 つにつき、最大 1000 回程度の計算が行われるので、M(≦10) 個のみかんそれぞれに計算を行っても 10000 回程度の計算しか行われないため、制限時間に余裕をもって間に合います。
重さが x のみかんを入れる箱の求め方を考えます。
箱の候補は 1 ~ 1200 なので、変数 : w が 1~1200 の範囲で for 文を回します。
みかんを入れる箱には N の倍数が書かれているので、w が N の倍数かどうかを判定する必要があります。
w が N の倍数かどうかは、以下のように判定することができます。
w % N == 0 : (w を N で割ったあまりが 0 かどうか)
候補の箱の中で、箱に書かれた数が x に最も近い箱(複数ある場合は大きい方)を探す必要があります。
以下の変数を定義して for 文を回すと良いでしょう。
ans := これまでにみた候補の箱に書かれた番号のうち、x に最も近いもの*/

// 残り物の量
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 入力の受け取り
        int m = scanner.nextInt();
        int p = scanner.nextInt();
        int q = scanner.nextInt();
        
        scanner.close();
        
        // 生鮮食品の販売後の残りの量
        double remainingAfterFreshSale = m * (1 - p / 100.0);
        
        // 惣菜販売後の残りの量
        double remainingAfterDeliSale = remainingAfterFreshSale * (1 - q / 100.0);
        
        // 結果の出力（小数点以下の精度を保つ）
        System.out.printf("%.4f\n", remainingAfterDeliSale);
    }
}
/*入力の受け取り
Scanner を使用して、標準入力から m, p, q の値を取得します。

生鮮食品の販売後の計算

m の p% を販売し、売れ残りを計算します。
remainingAfterFreshSale = m * (1 - p / 100.0)
惣菜販売後の計算

売れ残りを惣菜にし、その q% を販売。
remainingAfterDeliSale = remainingAfterFreshSale * (1 - q / 100.0)
結果の出力

System.out.printf("%.4f\n", remainingAfterDeliSale); で誤差を抑えて出力します。*/

// 1を数えよ【ビット演算】
step2 「1を数えよ」を解くために part1
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を受け取るためのScannerを作成
        Scanner sc = new Scanner(System.in);
        
        // 整数Nを入力
        int N = sc.nextInt();
        
        // 出力
        System.out.println(N);
    }
}
/*標準入力を用いて入力を受け取り、変数に代入します。
　　このとき整数型で受け取ります。
　　変数の名前に特に決まりはありませんが、この入力について問題文中で N と表記されているので、実装例では変数名を N にして、合わせています。
変数の値を標準出力します。*/

step3 「1を数えよ」を解くために part2
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を受け取るためのScannerを作成
        Scanner sc = new Scanner(System.in);
        
        // 2進数の文字列 S を入力
        String S = sc.nextLine();
        
        // 1の個数をカウントする変数
        int ans = 0;
        
        // S の各文字を調べて '1' を数える
        for (int i = 0; i < S.length(); i++) {
            if (S.charAt(i) == '1') {
                ans++;
            }
        }
        
        // 出力
        System.out.println(ans);
    }
}
/*標準入力を用いて入力を受け取り、変数に代入します。
　　解説・実装例では文字列型で受け取ることにします。(実装例では変数名 S)
1 の個数を管理する変数を用意し、初期値を 0 にします。(実装例では変数名 ans)
S の長さと同じ回数実行される繰り返し処理を書きます。
　　4 の手順が繰り返されるようにします。
　　解説・実装例ではループ変数を i とし、0 ~ S の長さ-1 まで変化させます。
S[i] が 1 なら ans に 1 加算します。(S[i] は 文字列 S の i+1 番目の文字を表します。)
ans の値を出力します。*/

step4 「1を数えよ」を解くために part3
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を受け取るためのScannerを作成
        Scanner sc = new Scanner(System.in);
        
        // 整数Nを入力
        int N = sc.nextInt();
        
        // 1の個数をカウントする変数
        int ans = 0;
        
        // N を 2 進数に変換する過程
        while (N > 0) {
            // N の最下位のビットが1であれば ans を増やす
            if (N % 2 == 1) {
                ans++;
            }
            // N を 2 で割って次のビットを調べる
            N /= 2;
        }
        
        // 結果を出力
        System.out.println(ans);
    }
}
/*1 標準入力を用いて入力を受け取り、変数に代入します。(実装例では変数名 N)
2 問題文にしたがって N を 2 進数に変換していきます。変換後の 2 進数を管理する配列を用意します。(実装例では変数名 binaryNumber)
3 N を商が 0 になるまで 2 で割り続けます。N を 2 で割った商が 0 より大きい限り繰り返される while 文を書きます。
　　4 ~ 5 の手順が繰り返されるようにします。
4 N を 2 で割った余りを binaryNumber に追加します。
5 N を 2 で割ります。切り捨て除算になるように注意してください。
6 N をbinaryNumber に追加します。
7 binaryNumber を逆順にします。ここまでの操作で binaryNumber は N を 2 進数に変換したものになりました。
　　この問題に解答する上では逆順にする操作はなくてもかまいません。
8 1 の個数を管理する変数を用意し、初期値を 0 にします。(実装例では変数名 ans)
9 binaryNumber の要素数と同じ回数実行される繰り返し処理を書きます。
　　10 の手順が繰り返されるようにします。
　　解説・実装例ではループ変数を i とします。
10 binaryNumber[i] が 1 なら ans に 1 加算します。
11 ans の値を出力します。*/

step5 「1を数えよ」を解くために part4
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を受け取るためのScannerを作成
        Scanner sc = new Scanner(System.in);
        
        // 整数Nを入力
        int N = sc.nextInt();
        
        // N と 1 の論理積を取って最下位ビットが1かどうか判定
        if ((N & 1) == 1) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
/*N を 2 進数にしたとき最下位の桁が 1 かどうか判定するには、2 進数で最下位の桁のみ 1 である数値との論理積を取ればよいです。 つまり、N と 1 の論理積を取ればよいです。 N と 1 の論理積が 1 なら N を 2 進数にしたとき最下位の桁が 1 、そうでないなら 0 です。
方針
標準入力を用いて入力を受け取り、変数に代入します。(実装例では変数名 N)
N と 1 の論理積によって処理が変わる条件分岐を書きます。
　　論理積が 1 なら Yes を出力します。
　　そうでないなら No を出力します。*/

step1  1を数えよ（力試し編）・final 1を数えよ
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 入力を読み取るためのScanner
        Scanner sc = new Scanner(System.in);
        
        // Nの値を読み取る
        int N = sc.nextInt();
        
        // 1の個数をカウントする変数
        int ans = 0;
        
        // bitMaskは1のビットを保持
        int bitMask = 1;
        
        // Nのビットの長さが最大で16ビットなので、16回繰り返せば十分
        for (int i = 0; i < 16; i++) {
            if ((N & bitMask) != 0) {  // bitMaskとNの論理積が0でない場合
                ans++;  // 1の個数をカウント
            }
            bitMask <<= 1;  // bitMaskを左シフトして次のビットをチェック
        }
        
        // 結果を出力
        System.out.println(ans);
    }
}
/*N を 2 進数にしたとき最下位の桁が 1 かどうか判定するには、2 進数で最下位の桁のみ 1 である数値との論理積を取ればよいのでした。 
これをすべてのビットに対して行えばよいです。 例えば、N の下から 2 ビット目が 1 か判定するには、2 進数で下から 2 桁目のみ 1 である数値 00000010、つまり 10 進数の 2 と論理積を取ればよいです。
このような、ビット単位の論理演算で特定のビットだけを取り出したりするために用いられるビットパターンのことをビットマスクと呼びます。
1 標準入力を用いて入力を受け取り、変数に代入します。(実装例では変数名 N)
2 1 の個数を管理する変数を用意し、初期値を 0 にします。(実装例では変数名 ans)
3 論理積を取る相手(ビットマスク)を用意し、初期値を 1 とします。(実装例では変数名 bitMask)
4 bitMask の値が N 以下である限り実行される繰り返し処理を書きます。
　　5 ~ 6 の手順が繰り返されるようにします。
5 N と bitMask の論理積が 0 でないなら、ans に 1 加算します。
6 bitMask に 2 をかけます。(bitMask のビットが立っている桁を左に 1 ずらします。)
7 ans の値を出力します。*/

// 文字列の抽出
step2 「文字列の抽出」を解くために part1
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 文字列 S を入力
        String input = scanner.nextLine();
        
        // 2 回出力
        System.out.println(input);
        System.out.println(input);
        
        scanner.close();
    }
}
/*標準入力から文字列 S を取得します。
その文字列を 2 回、改行区切りで出力します。*/

step3 「文字列の抽出」を解くために part2
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // 1行目: 開始タグと終了タグを取得
        String tagLine = scanner.nextLine();
        String[] tags = tagLine.split(" ");
        String startTag = tags[0];
        String endTag = tags[1];

        // 2行目: テキストデータを取得
        String text = scanner.nextLine();

        // 3行目: 開始タグと終了タグの位置を取得
        String[] positions = scanner.nextLine().split(" ");
        int startIndex = Integer.parseInt(positions[0]) - 1;  // インデックスは0-based
        int endIndex = Integer.parseInt(positions[1]) - 1;  // インデックスは0-based

        // 開始タグから終了タグの間の部分を抽出
        // 開始タグの終了位置は startIndex + startTag.length()
        // 終了タグの開始位置は endIndex
        String content = text.substring(startIndex + startTag.length(), endIndex).trim();

        // 抽出した内容が空の場合は<blank>を出力
        if (content.isEmpty()) {
            System.out.println("<blank>");
        } else {
            System.out.println(content);
        }

        scanner.close();
    }
}
/*タグとテキストデータの取得:
開始タグと終了タグを入力として取得します。
テキストデータを 2 行目から取得します。
開始タグと終了タグの位置（インデックス）を 3 行目から取得します。
抽出処理:
開始タグの位置から終了タグの位置を使って、タグ間の内容を抽出します。
開始タグと終了タグの間に何もない場合は <blank> を出力します。
出力:
抽出した内容をそのまま出力します。もし内容がない場合は <blank> と出力します。*/

step4 「文字列の抽出」を解くために part3
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 1行目: 開始タグと終了タグを取得
        String tagLine = scanner.nextLine();
        String[] tags = tagLine.split(" ");
        String startTag = tags[0];
        String endTag = tags[1];

        // 2行目: テキストデータを取得
        String text = scanner.nextLine();

        // 開始タグと終了タグの位置を検索
        int startIndex = text.indexOf(startTag); // 開始タグの位置 (0-based)
        int endIndex = text.indexOf(endTag);     // 終了タグの位置 (0-based)

        // 位置は1-basedにするため、それぞれに+1を加える
        System.out.println((startIndex + 1) + " " + (endIndex + 1));

        scanner.close();
    }
}
/*タグの入力を取得:
1 行目から開始タグ (tag_a) と終了タグ (tag_b) を取得します。
テキストデータの入力を取得:
2 行目からテキストデータ (S) を取得します。
開始タグと終了タグの位置を検索:
indexOf メソッドを使用して開始タグと終了タグの位置を検索します。indexOf はタグの最初の位置を返しますが、出力は1-based インデックスを要求されているので、0-based インデックスから1を加えた値を出力します。
位置の出力:
開始タグの位置と終了タグの位置を空白区切りで出力します。*/

step5 「文字列の抽出」を解くために part4
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 1行目: 開始タグと終了タグを取得
        String tagLine = scanner.nextLine();
        String[] tags = tagLine.split(" ");
        String startTag = tags[0];
        String endTag = tags[1];

        // 2行目: テキストデータを取得
        String text = scanner.nextLine();
        
        // 開始タグと終了タグをすべて見つける
        int startIndex = 0;
        while (startIndex != -1) {
            // 開始タグを探す
            startIndex = text.indexOf(startTag, startIndex);
            if (startIndex == -1) break; // 開始タグがもう見つからなければ終了

            // 終了タグを探す（開始タグの後から）
            int endIndex = text.indexOf(endTag, startIndex + startTag.length());
            if (endIndex == -1) break; // 終了タグが見つからなければ終了

            // 開始タグと終了タグの位置を1-based インデックスで出力
            System.out.println((startIndex + 1) + " " + (endIndex + 1));

            // 次の開始タグを探すためにstartIndexを更新
            startIndex = endIndex + endTag.length();
        }

        scanner.close();
    }
}
/*入力の取得:
開始タグと終了タグを1行目から取得します。
2行目でテキストデータを取得します。
開始タグと終了タグの位置の検索:
indexOf メソッドを使って開始タグと終了タグの位置を検索します。
開始タグが見つかった後、その位置から終了タグを探し、ペアとして位置を記録します。
終了タグを見つけると、次の開始タグを探し始めます。
結果の出力:
各開始タグと終了タグの位置を1-based インデックスで出力します。*/

step1  文字列の抽出（力試し編）・final 文字列の抽出
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 1行目のタグを取得
        String tagLine = scanner.nextLine();
        String[] tags = tagLine.split(" ");
        String startTag = tags[0];
        String endTag = tags[1];
        
        // 2行目のテキストデータを取得
        String text = scanner.nextLine();
        
        // 文字列の抽出開始
        int currentIndex = 0;
        
        while (true) {
            // 開始タグを探す
            int startIndex = text.indexOf(startTag, currentIndex);
            if (startIndex == -1) {
                break;  // 開始タグが見つからなければ終了
            }
            
            // 開始タグの後ろから終了タグを探す
            int endIndex = text.indexOf(endTag, startIndex + startTag.length());
            if (endIndex == -1) {
                break;  // 終了タグが見つからなければ終了
            }
            
            // 開始タグと終了タグの間の文字列を抽出
            String content = text.substring(startIndex + startTag.length(), endIndex);
            
            // コンテンツが空なら<blank>を出力
            if (content.isEmpty()) {
                System.out.println("<blank>");
            } else {
                System.out.println(content);
            }
            
            // 次の検索は終了タグの後から始める
            currentIndex = endIndex + endTag.length();
        }
        
        scanner.close();
    }
}
/*この問題では、特定の開始タグ <abc> と終了タグ <xyz> の間にある文字列を抽出するプログラムを作成する必要があります。入力されたタグに基づいて、テキストデータ内で開始タグから終了タグまでの間を繰り返し抽出し、出力します。もし、開始タグと終了タグの間に文字列がない場合は <blank> を出力します。

アルゴリズムの流れ
タグの入力: 開始タグと終了タグを入力から取得します。
テキストデータの処理:
開始タグをテキストデータ内で検索します。
開始タグが見つかると、その後に終了タグを検索します。
開始タグと終了タグの間に文字列があればその部分を出力し、終了タグの後から次の開始タグを探し続けます。
もし開始タグと終了タグの間に文字列がなければ <blank> を出力します。
繰り返し処理: 次の開始タグを見つけるまで処理を繰り返します。*/

// イルミネーション
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 1行目: N, M を読み取る
        int N = sc.nextInt();
        int M = sc.nextInt();

        // LED の明るさを保持する配列（0で初期化）
        int[] leds = new int[N];

        for (int i = 0; i < M; i++) {
            int a = sc.nextInt(); // LED番号
            int b = sc.nextInt(); // 明るさ

            // LEDの明るさを更新（aは1始まりなのでa-1にする）
            leds[a - 1] = b;

            // すべてのLEDが点灯しているか確認
            boolean allOn = true;
            int sum = 0;
            for (int j = 0; j < N; j++) {
                if (leds[j] == 0) {
                    allOn = false;
                    break;
                }
                sum += leds[j];
            }

            // 初めて全て点灯した瞬間に出力して終了
            if (allOn) {
                System.out.println(sum);
                sc.close();
                return;
            }
        }

        // 問題文に明記がないが、最後まで全点灯しない場合は出力なしのまま終了
        sc.close();
    }
}
/*入力の受け取り
　最初に標準入力から、LED の個数 N と信号の回数 M を読み取ります。
　次に、M 回繰り返しで「LED の番号 a_i」と「明るさ b_i」を読み取ります。

LED の状態を管理する配列を用意
　長さ N の整数配列 leds を用意して、最初はすべて 0（消灯状態）にしておきます。
　これは LED ごとの現在の明るさを記録しておくためです。

信号の処理（順番に更新）
　M 回の信号を順に処理し、指定された LED の明るさを更新します。
　入力で与えられる LED 番号は 1 から始まるので、配列のインデックスに合わせるために a_i - 1 の位置に b_i を代入します。

全て点灯しているかチェック
　信号を処理した直後に、LED 全部が点灯しているかどうか（すべての要素が 0 でないか）を調べます。
　同時に、点灯している LED の明るさの合計も計算します。
　もし一つでも 0 があれば「まだ全部点灯していない」と判断して、次の信号の処理に移ります。

初めて全点灯した瞬間に出力
　すべての LED が点灯していることが確認できたら、そのときの合計明るさを System.out.println() で出力して、プログラムを終了します。

最後まで全点灯しなかった場合
　問題文には明記がないため、最後まで全点灯しなかった場合は何も出力しないで終了します。*/

// 数列の調査
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        // 等差数列の判定
        String ansArith = "Yes";
        for (int i = 0; i < N - 2; i++) {
            if (A[i + 2] - A[i + 1] != A[i + 1] - A[i]) {
                ansArith = "No";
                break;
            }
        }

        // 等比数列の判定
        String ansGeo = "Yes";
        for (int i = 0; i < N - 2; i++) {
            // 整数で比較（誤差回避）
            if ((long) A[i + 2] * A[i] != (long) A[i + 1] * A[i + 1]) {
                ansGeo = "No";
                break;
            }
        }

        System.out.println(ansArith);
        System.out.println(ansGeo);

        sc.close();
    }
}
/*等差数列の判定
　隣接項の差がすべて等しいかをチェックします。
　
A i+2 − A i+1 = A i+1 − Ai
がすべての i (0 ≤ i ≤ N-3) で成り立つか確認します。

等比数列の判定
　浮動小数点で比を取ると誤差が出るので、整数のまま

A i+2 × Ai = A i+1 × A i+1
がすべての i で成り立つか確認します。*/
