// 動的配列
step1 ランダムアクセス
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();

        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }

        System.out.println(a.get(m - 1));
    }
}
/*数列の M 番目の値を出力します。
この問題の回答は、ランダムアクセスを用いると簡潔に記述できます。データの位置がわかっているときに、そのデータに直接アクセスすることをランダムアクセスといいます。配列はランダムアクセスをサポートするデータ型です。
Java で動的配列を使いたいときは ArrayList を使います。
List<Integer> a = new ArrayList<>() で空のリストを用意します。これに関しては Java の解説の最後で少し追加説明をします。
入力値を受け取って add メソッドでリストに追加していきます。
最後に m 番目の要素を get メソッドを使って取得し、出力します。この際、リストのインデックスは 0 から始まる、ということに注意して下さい。
【 リストの宣言、初期化についての追加説明 】
ArrayList で空のリストを用意する方法は以下の 2 通りあります。
List<Integer> a = new ArrayList<>()
ArrayList<Integer> a = new ArrayList<>()
1. でもよい理由は ArrayList が List インターフェースを実装しているクラスだからです。
1. と 2. の違いは以下の通りです。
1. で生成される a は List 型で、2. で生成される a はArrayList 型であることが違いです。
つまり、1. で生成される a は List 型のメソッドしか使えません。
メリット、デメリットを簡単に説明します。
1. について
メリット : List インターフェースを実装した他のオブジェクトを a に代入できることでコードの拡張性が広がる
デメリット : ArrayList 固有のメソッド (例えば clone など) を使うことができない
2. については 1. と逆のことが言えます。
一般的に、コードの拡張性が大事にされるので、1. の宣言方法がよく使われます。*/

step2 複数回のランダムアクセス
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }

        int q = sc.nextInt();

        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < q; i++) {
            b.add(sc.nextInt());
        }

        for (int x : b) {
            System.out.println(a.get(x - 1));
        }
    }
}
/*Q 回数列の B_i 番目の値を出力します。
この問題の回答は、ランダムアクセスを用いると簡潔に記述できます。データの位置がわかっているときに、そのデータに直接アクセスすることをランダムアクセスといいます。配列はランダムアクセスをサポートするデータ型です。
リストへのランダムアクセスは get メソッドを使います。
解答コードでは拡張 for 文でリスト b の各要素 x を取得して get メソッドで a の x 番目の要素を取得しています。*/

step3 最大値と最小値
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            a.add(sc.nextInt());
        }

        Collections.sort(a);

        System.out.println(a.get(2) - a.get(0));
    }
}
/*最大値と最小値をそれぞれ求め、その差を計算します。ソートを用いると簡潔に記述できます。
リストをソートしたいとき Collections.sort() を使うと簡単です。
引数でリストを渡すとそのリスト自身がソートされます。引数で渡すリストの要素の順番を直接変更するので、注意が必要です。
Collections.sort() はデフォルトで昇順にソートします。*/

final 動的配列
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int q = sc.nextInt();

        List<Integer> a = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }

        for (int i = 0; i < q; i++) {
            int query = sc.nextInt();
            if (query == 0) {
                int x = sc.nextInt();
                a.add(x);
            } else if (query == 1) {
                a.remove(a.size() - 1);
            } else {
                for (int j = 0; j < a.size(); j++) {
                    System.out.print(a.get(j));
                    if (j < a.size() - 1) {
                        System.out.print(" ");
                    } else {
                        System.out.println();
                    }
                }
            }
        }
    }
}
/*配列を用意して、これに追加、削除、出力ができるようにします。普通の配列を用いてもよいのですが、動的配列 (C++ における vector など) を用いると、バグを生みにくい実装が可能です。
リストを使って解いています。
query の処理について以下で簡単にまとめます。
【 push_back 】
add メソッドを使います。
a.add(e) のように使うとリスト a に要素 e を追加できます。
【 pop_back 】
remove メソッドを使います。
a.remove(a.size()-1) のように使うとリスト a の一番後ろの要素を削除できます。
【 print 】
for 文内でリスト a の各要素を出力します。
ループカウンタ j の値を用いて各要素の後ろの文字が半角スペースか、改行か、を判定します。
j が端のとき、つまり、j == a.size()-1 のときは改行を、それ以外のときは半角スペースを出力するようにします。*/

// 文字列の配列
step1 とても大きな数値の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String n = sc.next();
        System.out.println(n);
    }
}
/*受け取った入力をそのまま出力します。
入力値の最大値が 10 の 1,000 乗と非常に大きいため、基本的な整数型を用いるとオーバーフローします。
そこで、文字列型または多倍長整数を用います。方針の通り文字列型で受け取ってそのまま出力しています。*/

step2 とても小さな数値の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String n = sc.next();
        System.out.println(n);
    }
}
/*受け取った入力をそのまま出力します。
一般に、各言語に用意されている実数型には精度に限界があり、実数を誤差なく保持することは難しいです。
そこで、実数を文字列とみなし、文字列型を使います。方針の通り文字列型で受け取ってそのまま出力しています。*/

final 文字列の配列
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int h = sc.nextInt();
        int w = sc.nextInt();
        int r = sc.nextInt();
        int c = sc.nextInt();

        String[] s = new String[h];
        for (int i = 0; i < h; i++) {
            s[i] = sc.next();
        }

        if (s[r - 1].charAt(c - 1) == '#') {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
/*文字が H 行 W 列 で与えられるので 2 次元配列などを用いれば正解できます。
しかし、文字の配列は文字列とほぼ同義なので、配列の代わりに文字列を用いることで簡潔に実装することができます。
長さ h の文字列型の配列で、入力される迷路を表す文字列を受け取ります。
S_rc は r 行目の文字列の左から c 番目の文字なので、s[r-1].charAt(c-1) で取得します。*/

// 商品の検索
step1 数値の出現率
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        Map<Integer, Integer> a = new HashMap<>() {
            {
                for (int i = 0; i < 10; i++) {
                    put(i, 0);
                }
            }
        };
        for (int i = 0; i < n; i++) {
            int a_i = sc.nextInt();
            a.put(a_i, a.get(a_i) + 1);
        }

        for (int i = 0; i < 10; i++) {
            System.out.print(a.get(i));
            if (i < 9) {
                System.out.print(" ");
            } else {
                System.out.println();
            }
        }
    }
}
/*配列を用いる方法と辞書を用いる方法を紹介します。
配列を用いる方法の方針は、「配列の i 番目は数値 i の出現回数を保持する」です。
辞書を用いる方法を説明する前に、辞書について説明します。普段よく目にする国語辞典のような辞書を想像してください。
このような辞書は「単語名」と「単語の意味」が 1 対 1 でひもづけられています。プログラムでも同じようなことをします。数値 i について、「 i 」を「単語名」、「 i の出現回数」を「単語の意味」と置き換えます。すると「 i 」に対して「 i の出現回数」がひもづけられます。
このような「単語名」の追加、削除、「単語の意味」更新ができるデータ構造を辞書といいます。

マップを使う方法です。
マップについてはこの解答例 1 の解説の最後で少し詳しく説明します。
マップのキーに 0 から 9 までの整数を、値にキーの整数が出現した回数を設定することで解きます。
まず、for 文を用いて 0 から 9 までのキーとその値を設定します。
その後、for 文を使って入力値を受け取りながら整数の出現回数をカウントしていきます。
出現回数のカウントは以下の方法で行っています。
a.put(キー, a.get(キー)+1) で キー に対応する値を +1 して再登録する
get メソッドは a.get(キー) で キー に対応する値を取得するメソッドです。
【 マップについて 】
マップはキーと値を関連付けして管理するデータ型です。
マップは以下の 2 通りの方法で宣言、初期化できます。
Map<キーの型, 値の型> 変数名 = new HashMap<>()
HashMap<キーの型, 値の型> 変数名 = new HashMap<>()
HashMap の箇所は Map インターフェースを実装している他のクラスに書き換えることができます。
1. と 2. の 2 通りの方法がある理由、またそのメリット、デメリットはリストと同様です。*/

step2 英小文字の出現率
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        String s = sc.next();

        Map<Character, Integer> a = new HashMap<>() {
            {
                for (char c = 'a'; c < 'z' + 1; c++) {
                    put(c, 0);
                }
            }
        };

        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            a.put(c, a.get(c) + 1);
        }

        for (char c = 'a'; c < 'z' + 1; c++) {
            System.out.print(a.get(c));
            if (c < 'z') {
                System.out.print(" ");
            } else {
                System.out.println();
            }
        }
    }
}
/*本問題は「数値の出現率」と違い、数値が文字になりました。この場合、各文字を数値に変換できれば「数値の出現率」と同じ方法で出現回数を求めることができます。
そこで、「a=0, b=1, ..., z=25」としましょう。すると、ある文字 C について、C - a という式を用いると C が何番目の文字かを求めることができるようになります。
これは各文字が文字コードで連続した値になっていることを利用しています。C が 'a' のときは a - a = 0、C が 'b' のときはb - a = 1、 ... 、 C が 'z' のときはz - a = 25となり、上で定めた対応付けと一致します。
マップを使って解く方法です。
キーをアルファベット、値をそのアルファベットの出現回数、としてマップに登録して解きます。
まず、for(char c = 'a'; c <= 'z'; c++) を使ってアルファベットをキー、値を 0 としてマップに登録します。
なぜ上記の for 文で c に a から z が順に代入されるか、はこの解答例 1 の解説の最後で簡単に説明します。
for 文内で文字列 s の各文字の出現回数を調べます。
c = s.charAt(i) で文字列 s のインデックス i の文字 c を取得
a.put(c, a.get(c)+1) で c の出現回数を +1 してマップ a に再登録
get メソッドは a.get(キー) のように使って a の キー に対応する値を取得します。
出力は for(char c = 'a'; c <= 'z'; c++) の for 文内でおこなった方が安全です。
なぜか、というと、HashMap に格納されているデータの順序はキーの登録順とは限らないからです。
【 for(char c = 'a'; c <= 'z'; c++) について 】
char 型の値は unicode のコードポイントと呼ばれる数値です。
このコードポイントは a から z まで連番になっているので、上記の for 文で a から z まで順に取得することができます。*/

step3 文字列の出現率
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        Map<String, Integer> dict = new TreeMap<>();
        for (String t : s) {
            if (dict.containsKey(t)) {
                dict.put(t, dict.get(t) + 1);
            } else {
                dict.put(t, 1);
            }
        }

        for (String t : dict.keySet()) {
            System.out.println(t + " " + dict.get(t));
        }
    }
}
/*本問題は「英小文字の出現率の出現率」と違い、文字が文字列になりました。配列を用いて文字列の出現数を数え上げるのは難しいです。そこで、辞書を用います。
マップを使って解く方法です。
今回は HashMap ではなく、TreeMap を使っています。
TreeMap は Map インターフェースのサブインターフェースである SortedMap インターフェースを実装しているクラスです。
TreeMap に格納されているデータは常にキーの値でソートされた状態になっています。ソートのルールはデフォルトでは昇順です。
for 文内での処理を簡単に説明します。
dict.containsKey(t) でマップのキーに t が登録されているか判定する
キーに登録されていたら、dict.put(t, dict.get(t)+1) で出現回数を +1 して再登録する
されていなかったら、dict.put(t, 1) で登録する
TreeMap に格納されているデータは前述の通りキーの昇順でソートされているので、単に for(String t : dict.keySet()) の for 文でアルファベット順にキーを取得できます。
この keySet メソッドはマップに登録されているキーの集合を返します。*/

step4 価格の算出
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();

        Map<String, Integer> goods = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String a = sc.next();
            int b = sc.nextInt();
            goods.put(a, b);
        }

        for (int i = 0; i < m; i++) {
            String s = sc.next();
            if (goods.containsKey(s)) {
                System.out.println(goods.get(s));
            } else {
                System.out.println(-1);
            }
        }
    }
}
/*辞書を用いた定番の問題です。商品名 A, 価格 B というデータが与えられるので、辞書にキー A ,値 B としてデータを登録します。
その後、商品名 S が辞書に入っている場合はキー S に対応する値を出力し、S が辞書に入っていない場合は -1 を出力します。
マップで商品の情報を以下のように管理します。
キー : 商品の名前
値 : 商品の価格
マップに商品の情報を登録していく際は、商品の名前は重複しないことが問題文で保証されているので goods.containsKey(a) でその商品が既に登録されているかどうかを確かめる必要はありません。
しかし、出力の際は存在しない商品名が指定される可能性があるので goods.containsKey(s) で存在を確かめながら処理をします。*/

final 商品の検索
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int q = sc.nextInt();

        Map<String, Integer> s = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String s_i = sc.next();
            if (s.containsKey(s_i)) {
                continue;
            }
            s.put(s_i, i + 1);
        }

        for (int i = 0; i < q; i++) {
            String t_i = sc.next();
            if (s.containsKey(t_i)) {
                System.out.println(s.get(t_i));
            } else {
                System.out.println(-1);
            }
        }
    }
}
/*T が S に含まれているかどうかを毎回愚直に線形探索することで解くこともできますが、辞書を用いると単純かつ高速に探索することができるようになります。
S_1, S_2, ..., S_N の順で、以下のルールに従って辞書に S_i を登録します。
S_i がすでに登録されている場合 : 何もしない
S_i がまだ登録されていない場合 : キーを S_i、値を i として辞書に登録する
このように登録すると、辞書のキー S_x の値は初めて S_x が出たときの添字になります。
方針の考え方でマップ s を作成しています。
マップ s を用意したら、文字列 t_i を順に取得して s.get(t_i) で解を取得していきます。
ただし、t_i がマップ s に存在しない可能性があるので s.containsKey(t_i) で存在を確かめながら処理をおこなうようにして下さい。*/

// 集合の結合
step1 集合の探索
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int b = sc.nextInt();

        Set<Integer> a = new HashSet<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }

        if (a.contains(b)) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
/*数列 A の中に数値 B があるか判定するという問題です。単純に配列の中を探索する方法や辞書を用いる方法などがありますが、ここでは集合 (探索木, set) を用いた方法を紹介します。
集合を用いると「集合内にある数値が入っているか」を高速に判定したり、「集合内の最も小さな値」を高速に求めることができます。
セット(集合)を使って解く方法です。
セットについては Java の解説の最後で少し詳しく説明します。
Set<Integer> a = new HashSet<>() で空のセットを用意します。
a.add(sc.nextInt()) のように add メソッドを使って入力値をセット a に追加します。
最後に a.contains(b) でセット a に b が含まれているかを判定して Yes, No を出力します。
【 セットについて 】
セットは集合のことです。
集合は要素の重複を許しません。
セットは以下の 2 通りの方法で宣言、初期化を行うことができます。
Set<Integer> a = new HashSet<>()
HashSet<Integer> a = new HashSet<>()
HashSet と書いてある箇所は Set インターフェースを実装している他のクラスに書き換えることができます。
2 通りの方法がありますが、この理由やメリット、デメリットについてはマップやリストと同様です。*/

step2 重複の削除
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        List<Integer> a = new ArrayList<>();
        int prev = 0;
        for (int i = 0; i < n; i++) {
            int now = sc.nextInt();
            if (now == prev) {
                continue;
            }
            a.add(now);
            prev = now;
        }

        for (int i = 0; i < a.size(); i++) {
            System.out.print(a.get(i));
            if (i < a.size() - 1) {
                System.out.print(" ");
            } else {
                System.out.println();
            }
        }
    }
}
/*重複した要素を取り除く方法はいくつかありますが、「各数値を 1 つずつ見て、今見ている数値が前の数値と同じ数値なら無視し、違う数値なら答えとして出力する」方法です。prev の初期値は入力される A_i の値としてあり得ない値を設定しています。*/

step3 重複の判定1
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[10001];
        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            if (i > 0) {
                if (a[x] == 0) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                }
            }
            a[x] += 1;
        }
    }
}
/*ある値が以前に出現したかどうかを N - 1 回判定する問題です。
今回は配列を用いた方法と、集合を用いた簡潔な方法を紹介します。
配列 arr を用意し、値 A の出現回数を arr[A] で管理する。値 A を受け取ったときに arr[A] が 0 かどうかを判定する
集合 S を用意し、値 A が S に含まれているかどうかを判定する
配列を用いた方法です。
用意する配列を a と、入力される整数を x とすると a[x] == 0 かどうかで判定しています。*/

step4 重複の判定2
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        Set<Integer> a = new HashSet<>();
        a.add(sc.nextInt());
        for (int i = 1; i < n; i++) {
            boolean success = a.add(sc.nextInt());
            if (success) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
            }
        }
    }
}
/*ある値が以前に出現したかどうかを N - 1 回判定する問題です。
A_i が小さい値であれば配列を用いて「 nums[i] を i が出現した数」と定義して解くことができますが、今回 は A_i の値が非常に大きいので、この方法は使えません。
従って、集合を用いて解くことにします。
ある値 A を受け取って、それが集合 S の中にあれば Yes 、なければ No を出力し、その後 S に A を追加することを繰り返します。
方針の通りセット(集合)で解きます。
コードは前回の解説の解答例 1 で示したコードと全く同じで解くことができるので、以下では前問の解説の内容を再掲します。
【 重複の判定 1 の解答例 1 の解説より 】
セット(集合)を使った方法です。
add メソッドは「追加が成功したか」が true, false で返ってくるので、この値を使って Yes, No のどちらを出力するかを判定しています。
最初に入力される整数を予めセットに追加しておくことに注意して下さい。*/

final 集合の結合
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        Set<Integer> a = new HashSet<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }

        Set<Integer> b = new HashSet<>();
        for (int i = 0; i < n; i++) {
            b.add(sc.nextInt());
        }

        TreeSet<Integer> union = new TreeSet<>();
        // φ ∪ A
        union.addAll(a);
        // A ∪ B
        union.addAll(b);

        int max = union.last();
        for (int x : union) {
            System.out.print(x);
            if (x < max) {
                System.out.print(" ");
            } else {
                System.out.println();
            }
        }
    }
}
/*配列 A に 配列 B の要素を追加して、配列 A をソートして、隣り合った同じ要素を削除するという方法で解くことができますが、これは少し実装が大変です。
そこで集合を扱うデータ構造を用いた方法を紹介します。この問題は集合演算でいうところの「和」の演算をする問題です。
セットには addAll というメソッドがあり、このメソッドは union.addAll(a) のように使うと a の要素を union の要素と重複なく union に追加します。
出力は以下のようにしておこないます。
セットの最後の要素、つまり最大値を a.last() で取得して変数 max に代入する
拡張 for 文内で セットの各要素 x を出力しながら x < max であるか判定する
x < max である場合、x の後ろで半角スペースを出力する
x < max でない場合、x の後ろで改行を出力する
この方法を取るに際してセット union を TreeSet 型で宣言していることに注意して下さい。
これは int max = union.last() で last メソッドを使うからです。「重複の削除」の解答例 1 の解説でもう少し詳しく説明しています。*/
