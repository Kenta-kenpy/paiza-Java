<【次元配列の入出力】i番目の出力 Boss>
step1　要素数の出力
public class Main {

    public static void main(String[] args) {
        int[] a = new int[] { 5, 1, 3, 4, 5, 12, 6, 8, 1, 3 };

        System.out.println(a.length);
    }
}
/*vector を与えられた数列で初期化します。
要素数を出力します。
Java では、配列定義時に格納する要素が決まっている場合は int[] a = new int[] {n_1, n_2, ..., n_N}; などのように記述します。
定義の際、new int[] は省略することが可能です。
配列の要素数は 配列.length で取得出来ます。*/

step2　全要素の出力
public class Main {

    public static void main(String[] args) {
        int[] a = new int[] { 5, 1, 3, 4, 5, 12, 6, 8, 1, 3 };

        for (int x : a) {
            System.out.println(x);
        }
    }
}
/*vector を与えられた数列で初期化します。全要素を改行区切りで出力します。
指示された数列を配列を用いて管理します。
出力の際、for 文を用いると簡潔に記述できます。
今回は拡張 for 文を使いました。
【 拡張 for 文について 】
拡張 for 文は配列やリストなどのオブジェクトの各要素を順に変数に代入して繰り返し処理ができる for 文のことです。
【 書き方 】
for(要素の型 変数名 : 配列など) {処理} のように書きます。
配列などのオブジェクトに格納されている値の型に応じた変数を用意する必要があります。
【 動作 】
配列などのオブジェクトの先頭の要素から順に変数に代入され、繰り返し処理が行われます。
たとえば、要素数 n の整数型配列 a に対して
for(int i : a) {System.out.println(i)}
と記述した for 文の実行結果は以下のようになります。
a_1 
a_2
a_3
...
a_n
*/
    
step3　i番目の出力


step4　配列の入力１


step5　配列の入力２


step6　配列の入力３


step7  i番目の出力１


step8　i番目の出力２


final  i番目の出力Boss


<【二次元配列の入出力】i番目の出力 Boss>
step1　要素数の出力


step2　全要素の出力


step3　行数の出力


step4　列数の出力


step5　各行の要素数の出力


step6　i行目j列目の出力


step7  二次元配列の入力１


step8　二次元配列の入力２

 
step9  二次元配列の入力３


step10　二次元配列の入力４


step11  i番目の出力１


step12  i番目の出力２


final  i番目の出力Boss


<【配列の検索】何個ある? Boss>
step1　配列に含まれている?１

step2　配列に含まれている?２

step3　配列に含まれている?３
    
step4　何番目にある？１

step5　何番目にある？２

step6　何番目にある？３

step7  何個ある？１

step8　何個ある？２

final  何個ある？Boss

<【文字列の配列】辞書順に出力 Boss>
step1　配列の書き換え

step2　2変数の入れ替え

step3　配列の要素の入れ替え
    
step4　部分配列

step5　配列の連結

step6　配列のソート

step7  配列の反転

step8　要素のカウント

step9  配列末尾への追加
    
step10　要素の削除

step11  要素の挿入
    
step12  要素数の出力

step13　全要素の出力

step14　i番目の出力

step15　文字列の配列の入力１

step16　文字列の配列の入力２
    
step17　文字列の配列の入力３

step18　i番目の出力１

step19　i番目の出力２

step20　i番目の出力３

step21　i番目の出力４

step22　辞書順に出力１

step23　辞書順に出力２
    
step24　辞書順に出力３
    
final　 辞書順に出力 Boss

<フィボナッチ数>
step1　重複の削除

step2　配列の最大最小

step3　ある数以上以下の要素の列挙１

step4　ある数以上以下の要素の列挙２

step5　ある数以上以下の要素の列挙３
        
step6　二点間の距離１
    
step7　二点間の距離２

final　フィボナッチ数
