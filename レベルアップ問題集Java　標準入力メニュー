// 【行入力】1,000 行の入力
step1 1行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        System.out.println(s);

        sc.close();
    }
}
/*まず入力を受け取って変数 s に代入します。
次に s をそのまま出力します。
この解答例では、標準入力の受け取りに Scanner を用います。
そして、Scanner クラスのメソッドを用いて、入力を受け取ります。
Scanner クラスは java.util にあるので、
import java.util.Scanner;
または
import java.util.*;
でインポートして使います。
後者の import 文は java.util 直下にあるクラスをすべてインポートして使える様にすることができます。
Scanner クラスで標準入力を文字列で受け取るためには、next メソッドを使います。
受け取った文字列を System.out.println() を用いて出力します。これは、() に挟まれた値を末尾に改行を入れて出力します。*/

step2 2行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();

        System.out.println(s);
        System.out.println(t);

        sc.close();
    }
}
/*まず入力を受け取って変数 s, t に代入します。次に s, t をそのまま出力します。
Scanner クラスの next メソッドはデフォルトで、入力を空白文字区切り (※1) で受け取ることができます。
今回は 2 度 next メソッドを使うことで、2 つの入力値を受け取ることができます。
出力には System.out.println() を使います。これは () に挟まれた値を末尾に改行を入れて出力します。
【 ※1 Java での空白文字 】
Java での空白文字は「スペース (半角、全角問わず)」「改行」「タブ」などのことを指します。
具体的には Character.isWhitespace(文字) で true が返ってくる 文字 が空白文字です。*/

step3 3行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();
        String u = sc.next();

        System.out.println(s);
        System.out.println(t);
        System.out.println(u);

        sc.close();
    }
}
/*まず入力を受け取って変数 s, t, u に代入します。
次に s, t, u をそのまま出力します。
Scanner クラスの next メソッドを 3 回使うことで、今回の入力を受け取ることができます。
出力には、System.out.println() を使います。*/

step4 10行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        for (int i = 0; i < 10; i++) {
            String s = sc.next();

            System.out.println(s);
        }

        sc.close();
    }
}
/*配列を使わない
文字列が一つ与えられたら、与えられた文字列をそのまま出力します。
ループを使うことで、10個の文字列について、それぞれ標準入力から受け取ってそのまま出力する操作を繰り返すことができます。

配列を使う
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        String[] s = new String[10];
        for(int i = 0; i < 10; i++) {
            s[i] = sc.next();
        }
        
        for(String t : s) {
            System.out.println(t);
        }
        
        sc.close();
    }
配列を使う方法です。
長さが 10 である配列を用意して、それぞれに入力を代入して保持します。
その後、拡張 for 文で配列の各要素を取得して、出力します。
【 拡張 for 文について 】
拡張 for 文は配列やリストなどのオブジェクトの各要素を順に変数に代入して繰り返し処理ができる for 文のことです。
【 書き方 】
for(要素の型 変数名 : 配列など) {処理} のように書きます。
配列などのオブジェクトに格納されている値の型に応じた変数を用意する必要があります。
【 動作 】
配列などのオブジェクトの先頭の要素から順に変数に代入され、繰り返し処理が行われます。
たとえば、要素数 n の整数型配列 a に対して
for(int i : a) {System.out.println(i)}
と記述した for 文の実行結果は以下のようになります。
a_1 
a_2
a_3
...
a_n */

final 1000行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[1000];
        for (int i = 0; i < 1000; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*要素が 1,000 個あるので、ループを用いて各行の文字列を入力を受け取り、そのたびに出力します。
配列を使わない
入力される文字列の数だけループ処理をする for 文を書きます。

配列を使う
import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    String[] s = new String[1000];
    for (int i = 0; i < 1000; i++) {
      s[i] = sc.next();
    }

    for (String t : s) {
      System.out.println(t);
    }

    sc.close();
  }
}
配列と拡張 for 文を用いると上記の様に書けます。*/

//【半角スペース区切りでの文字列の分割】5つの文字列の半角スペース区切りでの分割
step1 2つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "Hello paiza";
        String[] values = s.split(" ");

        System.out.println(values[0]);
        System.out.println(values[1]);
    }
}
/*文字列を分割する際、split メソッドを使います。
split メソッドについて
split メソッドは文字列を分割する目的で使います。
引数で 「何を区切り文字として文字列を分割するか」 を指定します。
返り値は区切り文字によって区切られた文字列が先頭から順に格納された配列です。
今回、半角スペースで分割したあと、要素数 2 の配列が生成されるので、それぞれの要素を改行区切りで出力します。*/

step2 3つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "He likes paiza";
        String[] values = s.split(" ");

        for (String t : values) {
            System.out.println(t);
        }
    }
}
/*分割した後、ループなどを用いて各文字列を出力します。前問と同様に split メソッドを用いて文字列を分割します。
分割後、拡張 for 文を用いてそれぞれの要素を出力することで、System.out.println() を 1 回書くだけで済みます。*/

final 5つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "one two three four five";
        String[] values = s.split(" ");

        for (String t : values) {
            System.out.println(t);
        }
    }
}
/*前問と同様の要領で split メソッドを使って解きます。
分割後、拡張 for 文を用いてそれぞれの要素を出力することで、System.out.println() を 1 回書くだけで済みます。*/

// 【半角スペース区切りの入力】半角スペース区切りの 1,000 個の入力
step1 1つの整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        System.out.println(s);

        sc.close();
    }
}
/*半角スペースを含まない 1 つの文字列なので、s にそのまま入力します。
次に s をそのまま出力します。入力される文字列に空白文字が含まれないことが保証されているので、next() メソッドを用いて入力される文字列を受け取ります。
受け取ったら、そのまま System.out.println() を用いて出力します。*/

step2 2つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();

        System.out.println(s);
        System.out.println(t);

        sc.close();
    }
}
/*半角スペース区切りで分割し、変数 s, t に代入します。それぞれ改行して出力します。
Scanner クラスの next メソッドは特に指定しない限り、入力を空白文字区切りで受け取ります。
なにが空白文字か、については Oracle の API に書かれています。
今回の場合、2 回 next メソッドを用いることで、入力されるすべての文字列を受け取ることができます。*/

step3 5つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        for(int i = 0; i < 3; i++) {
            String s = sc.next();

            System.out.println(s);
        }
        
        sc.close();
    }
}
/*配列を使わない
半角スペース区切りで分割し、変数 s, t, u または 配列 s に代入します。
それぞれ改行して出力します。「入力を受け取る」 -> 「出力する」の繰り返しで求められている出力ができるので、for 文を使うことで簡潔に書けます。

配列を使う
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[3];
        for(int i = 0; i < 3; i++) {
            s[i] = sc.next();
        }

        for(String t: s) {
            System.out.println(t);
        }
        
        sc.close();
    }
}
配列を用いて入力値を格納すると、上記のコードの様になります。
配列を用いると、それぞれの文字列に対して個別に変数を用意するよりも簡潔に書けます。*/

step4 10個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[10];
        for (int i = 0; i < 10; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*半角スペース区切りで分割し、各文字列を配列 s に代入します。それぞれ改行して出力します。
next メソッドは特に指定しない限り、空白文字 区切りで入力を受け取るので、今回の場合、next メソッドを 10 回使うことで、すべての入力を受け取れます。*/

final 1,000個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[1000];
        for (int i = 0; i < 1000; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*スペース区切りで分割し、各文字列を配列 s に代入します。それぞれ改行して出力します。
1000 個の変数を用意して入力を受け取るのは現実的ではないので、配列と for 文を用います。*/

// 【整数の行入力】1,000行の整数の入力
step1 1行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();

        System.out.println(a);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a に代入します。その次に、a をそのまま出力します。
Scanner クラスの nextInt メソッドを用います。
nextInt メソッドは next メソッドと同様のルールで入力値を受け取りますが、それを整数型に変換して受け取ります。*/

step2 2行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        int b = sc.nextInt();

        System.out.println(a);
        System.out.println(b);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a, b に代入します。その次に、a, b を 2 行で出力します。
入力値を整数値で受け取るために、nextInt メソッドを使います。
出力は System.out.println() を使います。*/

step3 5行の整数の入力
step4 100行の整数の入力
final 1000行の整数の入力

// 【整数の半角スペース区切りの入力】1,000個の整数の半角スペース区切りの入力
step1 1つの整数の入力
step2 2つの整数の半角スペース区切りの入力
step3 5つの整数の半角スペース区切りの入力
step4 10個の整数の半角スペース区切りの入力
final 1000個の整数の半角スペース区切りの入力

// 【N個の整数の入力】1行目で与えられるN個の整数の入力 (large)
step1 改行区切りでのN個の整数の入力
step2 2行目で与えられるN個の整数の入力
step3 1行目で与えられるN個の整数の入力
step4 2行目で与えられるN個の整数の入力 (large)
final 1行目で与えられるN個の整数の入力 (large)

// 【N個の文字列の入力】1行目で与えられるN個の文字列の入力 (large)
step1 改行区切りでのN個の文字列の入力
step2 2行目で与えられるN個の文字列の入力
step3 1行目で与えられるN個の文字列の入力
step4 2行目で与えられるN個の文字列の入力 (large)
final 1行目で与えられるN個の文字列の入力 (large)

// 【N個の文字列の入力】1行目で与えられるN個の実数の入力 (large)
step1 改行区切りでのN個の実数の入力
step2 2行目で与えられるN個の実数の入力
step3 1行目で与えられるN個の実数の入力
step4 2行目で与えられるN個の実数の入力 (large)
final 1行目で与えられるN個の実数の入力 (large)

// 【組になったデータの入力】文字列と整数の組からの選択
step1 1つの整数の組の入力
step2 N組の整数の入力
step3 整数の組からの選択
step4 文字列と整数の組の入力
final 文字列と整数の組からの選択

// 【N 行 M 列のデータの入力】行ごとに要素数の異なる整数列の入力
step1 3行3列の整数の入力
step2 N行3列の整数の入力
step3 3行M列の整数の入力
step4 N行M列の整数の入力
final 行ごとに要素数の異なる整数列の入力
