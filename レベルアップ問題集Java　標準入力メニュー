// 【行入力】1,000 行の入力
step1 1行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        System.out.println(s);

        sc.close();
    }
}
/*まず入力を受け取って変数 s に代入します。
次に s をそのまま出力します。
この解答例では、標準入力の受け取りに Scanner を用います。
そして、Scanner クラスのメソッドを用いて、入力を受け取ります。
Scanner クラスは java.util にあるので、
import java.util.Scanner;
または
import java.util.*;
でインポートして使います。
後者の import 文は java.util 直下にあるクラスをすべてインポートして使える様にすることができます。
Scanner クラスで標準入力を文字列で受け取るためには、next メソッドを使います。
受け取った文字列を System.out.println() を用いて出力します。これは、() に挟まれた値を末尾に改行を入れて出力します。*/

step2 2行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();

        System.out.println(s);
        System.out.println(t);

        sc.close();
    }
}
/*まず入力を受け取って変数 s, t に代入します。次に s, t をそのまま出力します。
Scanner クラスの next メソッドはデフォルトで、入力を空白文字区切り (※1) で受け取ることができます。
今回は 2 度 next メソッドを使うことで、2 つの入力値を受け取ることができます。
出力には System.out.println() を使います。これは () に挟まれた値を末尾に改行を入れて出力します。
【 ※1 Java での空白文字 】
Java での空白文字は「スペース (半角、全角問わず)」「改行」「タブ」などのことを指します。
具体的には Character.isWhitespace(文字) で true が返ってくる 文字 が空白文字です。*/

step3 3行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();
        String u = sc.next();

        System.out.println(s);
        System.out.println(t);
        System.out.println(u);

        sc.close();
    }
}
/*まず入力を受け取って変数 s, t, u に代入します。
次に s, t, u をそのまま出力します。
Scanner クラスの next メソッドを 3 回使うことで、今回の入力を受け取ることができます。
出力には、System.out.println() を使います。*/

step4 10行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        for (int i = 0; i < 10; i++) {
            String s = sc.next();

            System.out.println(s);
        }

        sc.close();
    }
}
/*配列を使わない
文字列が一つ与えられたら、与えられた文字列をそのまま出力します。
ループを使うことで、10個の文字列について、それぞれ標準入力から受け取ってそのまま出力する操作を繰り返すことができます。

配列を使う
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        String[] s = new String[10];
        for(int i = 0; i < 10; i++) {
            s[i] = sc.next();
        }
        
        for(String t : s) {
            System.out.println(t);
        }
        
        sc.close();
    }
配列を使う方法です。
長さが 10 である配列を用意して、それぞれに入力を代入して保持します。
その後、拡張 for 文で配列の各要素を取得して、出力します。
【 拡張 for 文について 】
拡張 for 文は配列やリストなどのオブジェクトの各要素を順に変数に代入して繰り返し処理ができる for 文のことです。
【 書き方 】
for(要素の型 変数名 : 配列など) {処理} のように書きます。
配列などのオブジェクトに格納されている値の型に応じた変数を用意する必要があります。
【 動作 】
配列などのオブジェクトの先頭の要素から順に変数に代入され、繰り返し処理が行われます。
たとえば、要素数 n の整数型配列 a に対して
for(int i : a) {System.out.println(i)}
と記述した for 文の実行結果は以下のようになります。
a_1 
a_2
a_3
...
a_n */

final 1000行の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[1000];
        for (int i = 0; i < 1000; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*要素が 1,000 個あるので、ループを用いて各行の文字列を入力を受け取り、そのたびに出力します。
配列を使わない
入力される文字列の数だけループ処理をする for 文を書きます。

配列を使う
import java.util.*;

public class Main {

  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);

    String[] s = new String[1000];
    for (int i = 0; i < 1000; i++) {
      s[i] = sc.next();
    }

    for (String t : s) {
      System.out.println(t);
    }

    sc.close();
  }
}
配列と拡張 for 文を用いると上記の様に書けます。*/

//【半角スペース区切りでの文字列の分割】5つの文字列の半角スペース区切りでの分割
step1 2つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "Hello paiza";
        String[] values = s.split(" ");

        System.out.println(values[0]);
        System.out.println(values[1]);
    }
}
/*文字列を分割する際、split メソッドを使います。
split メソッドについて
split メソッドは文字列を分割する目的で使います。
引数で 「何を区切り文字として文字列を分割するか」 を指定します。
返り値は区切り文字によって区切られた文字列が先頭から順に格納された配列です。
今回、半角スペースで分割したあと、要素数 2 の配列が生成されるので、それぞれの要素を改行区切りで出力します。*/

step2 3つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "He likes paiza";
        String[] values = s.split(" ");

        for (String t : values) {
            System.out.println(t);
        }
    }
}
/*分割した後、ループなどを用いて各文字列を出力します。前問と同様に split メソッドを用いて文字列を分割します。
分割後、拡張 for 文を用いてそれぞれの要素を出力することで、System.out.println() を 1 回書くだけで済みます。*/

final 5つの文字列の半角スペース区切りでの分割
public class Main {

    public static void main(String[] args) {
        String s = "one two three four five";
        String[] values = s.split(" ");

        for (String t : values) {
            System.out.println(t);
        }
    }
}
/*前問と同様の要領で split メソッドを使って解きます。
分割後、拡張 for 文を用いてそれぞれの要素を出力することで、System.out.println() を 1 回書くだけで済みます。*/

// 【半角スペース区切りの入力】半角スペース区切りの 1,000 個の入力
step1 1つの整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        System.out.println(s);

        sc.close();
    }
}
/*半角スペースを含まない 1 つの文字列なので、s にそのまま入力します。
次に s をそのまま出力します。入力される文字列に空白文字が含まれないことが保証されているので、next() メソッドを用いて入力される文字列を受け取ります。
受け取ったら、そのまま System.out.println() を用いて出力します。*/

step2 2つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String t = sc.next();

        System.out.println(s);
        System.out.println(t);

        sc.close();
    }
}
/*半角スペース区切りで分割し、変数 s, t に代入します。それぞれ改行して出力します。
Scanner クラスの next メソッドは特に指定しない限り、入力を空白文字区切りで受け取ります。
なにが空白文字か、については Oracle の API に書かれています。
今回の場合、2 回 next メソッドを用いることで、入力されるすべての文字列を受け取ることができます。*/

step3 5つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        for(int i = 0; i < 3; i++) {
            String s = sc.next();

            System.out.println(s);
        }
        
        sc.close();
    }
}
/*配列を使わない
半角スペース区切りで分割し、変数 s, t, u または 配列 s に代入します。
それぞれ改行して出力します。「入力を受け取る」 -> 「出力する」の繰り返しで求められている出力ができるので、for 文を使うことで簡潔に書けます。

配列を使う
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[3];
        for(int i = 0; i < 3; i++) {
            s[i] = sc.next();
        }

        for(String t: s) {
            System.out.println(t);
        }
        
        sc.close();
    }
}
配列を用いて入力値を格納すると、上記のコードの様になります。
配列を用いると、それぞれの文字列に対して個別に変数を用意するよりも簡潔に書けます。*/

step4 10個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[10];
        for (int i = 0; i < 10; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*半角スペース区切りで分割し、各文字列を配列 s に代入します。それぞれ改行して出力します。
next メソッドは特に指定しない限り、空白文字 区切りで入力を受け取るので、今回の場合、next メソッドを 10 回使うことで、すべての入力を受け取れます。*/

final 1,000個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String[] s = new String[1000];
        for (int i = 0; i < 1000; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*スペース区切りで分割し、各文字列を配列 s に代入します。それぞれ改行して出力します。
1000 個の変数を用意して入力を受け取るのは現実的ではないので、配列と for 文を用います。*/

// 【整数の行入力】1,000行の整数の入力
step1 1行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();

        System.out.println(a);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a に代入します。その次に、a をそのまま出力します。
Scanner クラスの nextInt メソッドを用います。
nextInt メソッドは next メソッドと同様のルールで入力値を受け取りますが、それを整数型に変換して受け取ります。*/

step2 2行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        int b = sc.nextInt();

        System.out.println(a);
        System.out.println(b);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a, b に代入します。その次に、a, b を 2 行で出力します。
入力値を整数値で受け取るために、nextInt メソッドを使います。
出力は System.out.println() を使います。*/

step3 5行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[5];
        for (int i = 0; i < 5; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*5 つの整数を格納する配列を用意して、入力を受け取ります。
nextInt メソッドを用いることで、入力を整数として受け取ることができます。
出力は、拡張 for 文を使うと簡潔に書けます。*/

step4 100行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[100];
        for (int i = 0; i < 100; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず入力を受け取り、整数型の配列 a の a[0] から a[99] にループを用いて代入します。
その次に、a[0] から a[99] をループを用いて 100 行で出力します。従って、用意する配列の要素数と、for 文のループ回数を 100 に変更するだけで解けます。
配列への代入や、要素の出力は 100 回同じ操作を繰り返すだけなので、for 文を使うことで簡潔に書けます。*/

final 1000行の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[1000];
        for (int i = 0; i < 1000; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず入力を受け取り、整数型の配列 a の a[0] から a[999] にループを用いて代入します。
その次に、a[0] から a[999] をループを用いて 1000 行で出力します。*/

// 【整数の半角スペース区切りの入力】1,000個の整数の半角スペース区切りの入力
step1 1つの整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();

        System.out.println(a);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a に代入します。その次に、a を出力します。
Java では、入力を整数で受け取りたいとき、Scanner クラスの nextInt メソッドを使うと便利です。
受け取った整数をそのまま出力すれば解けます。*/

step2 2つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        int b = sc.nextInt();

        System.out.println(a);
        System.out.println(b);

        sc.close();
    }
}
/*まず入力を受け取り、変数 a, b に代入します。その次に、a, b を改行区切りで出力します。
Java では、入力を整数で受け取るとき、Scanner クラスの nextInt メソッドを使うと便利です。
nextInt メソッドは next メソッドと同様に、空白文字区切りで入力を受け取ります。
受け取った値を変数に代入して、それを System.out.println() で出力することで解けます。*?

step3 5つの整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[5];
        for (int i = 0; i < 5; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず整数型の変数を 5 個宣言するか、配列を宣言し、入力を受け取って代入します。その次に、a_1 から a_5 を改行区切りで出力します。
入力値が 5 つとなり、少し多くなってきたので、配列を利用します。
nextInt メソッドは next メソッドと同様に、空白文字区切りで入力を受け取るので、5 回実行すれば、半角スペース区切りで入力される 5 つの整数を受け取ることができます。
出力は拡張 for 文を用いることで System.out.println() を 1 つ書くだけで済みます。
拡張 for 文は配列やリストなどのオブジェクトの各要素を、用意した変数に代入しながら繰り返し処理を行う for 文です。*/

step4 10個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[10];
        for (int i = 0; i < 10; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*配列を宣言し、入力を受け取って代入します。その次に、a_1 から a_10 を改行区切りで出力します。
10 個の整数が入力されるので、配列を用いることを考えます。
出力は拡張 for 文を用いることで System.out.println() を 1 つ書くだけで済みます。
拡張 for は配列やリストなどのオブジェクトの各要素を、用意した変数に代入しながら繰り返し処理を行う for 文です。*/

final 1000個の整数の半角スペース区切りの入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] a = new int[1000];
        for (int i = 0; i < 1000; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*配列を宣言し、入力を受け取って代入します。その次に、a_1 から a_1000 を改行区切りで出力します。
1000 個の整数を受け取らなくてはならないので、配列と for 文を用いることを考えます。
出力は拡張 for 文を用いることで System.out.println() を 1 つ書くだけで済みます。
拡張 for は配列やリストなどのオブジェクトの各要素を、用意した変数に代入しながら繰り返し処理を行う for 文です。*/

// 【N個の整数の入力】1行目で与えられるN個の整数の入力 (large)
step1 改行区切りでのN個の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まずは、2 行目以降に入力される整数の数 n を受け取ります。
その後、長さ n の配列を用意して、for 文でそれぞれ代入していきます。
出力は拡張 for 文を用いると簡潔に書けます。*/

step2 2行目で与えられるN個の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず N を受け取ります。
n 個の整数が入る配列を用意し、N 個の整数をループを用いて受け取ります。ループを用いて a_1 から a_N までループを用いて出力します。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。出力は拡張 for 文を用いると簡潔に書けます。
nextInt メソッドは next メソッド同様に、空白文字区切りで入力を受け取るので、前問の解答と同様のコードで解けます。*/

step3 1行目で与えられるN個の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず N を受け取ります。N 個の整数が入る配列を用意し、N 個の整数をループを用いて受け取ります。
まずは、入力される整数列 a の要素数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。出力は拡張 for 文を用いると簡潔に書けます。
nextInt メソッドは next メソッド同様のルールで入力を受け取るので、前問の解答と同様のコードで解けます。*/

step4 2行目で与えられるN個の整数の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず N を受け取ります。
N 個の整数が入る配列を用意し、N 個の整数をループを用いて受け取ります。
ループを用いて a_1 から a_N を出力します。
まずは、2 行目で入力される整数の数 n を受け取ります。
その後、n に基づいて配列を用意して、for 文でそれぞれ代入していきます。
出力は拡張 for 文で書くと簡潔に書けます。
nextInt メソッドは next メソッド同様のルールで入力を受け取る。*/

final 1行目で与えられるN個の整数の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        for (int x : a) {
            System.out.println(x);
        }

        sc.close();
    }
}
/*まず N を受け取ります。
N 個の整数が入る配列を用意し、N 個の整数をループを用いて受け取ります。a_1 から a_N までループを用いて出力します。
まずは、2 行目で入力される整数の数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。出力は拡張 for 文を用いて書くと簡潔に書けます。*/

// 【N個の文字列の入力】1行目で与えられるN個の文字列の入力 (large)
step1 改行区切りでのN個の文字列の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*まず整数 N を受け取ります。文字列型の配列を用意し、N 個の文字列を受け取ります。
ループを用いて 1 個目の文字列から N 個目の文字列を出力します。まずは、2 行目以降に入力される文字列の数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。next メソッドは、空白文字区切りで入力を受け取ります。出力は拡張 for 文を用いると簡潔に書けます。*/

step2 2行目で与えられるN個の文字列の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*まず整数 N を受け取ります。文字列型の配列を用意し、N 個の文字列をループを用いて受け取ります。ループを用いて s_1 から s_N まで出力します。
まずは、2 行目で入力される文字列の数を表す整数 n を受け取ります。その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。
出力は拡張 for 文を用いると簡潔に書けます。*/

step3 1行目で与えられるN個の文字列の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*まず N を受け取ります。
N 個の文字列が入る配列を用意し、N 個の文字列をループを用いて受け取ります。
ループを用いて s_1 から s_N まで出力します。まずは、入力される文字列 s の数を表す整数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。
出力は拡張 for 文を用いると簡潔に書けます。next メソッドは、空白文字区切りで入力を受け取る。*/

step4 2行目で与えられるN個の文字列の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*まず N を受け取ります。N 個の文字列が入る配列を用意し、ループを用いて受け取ります。
ループを用いて s_1 から s_N を出力します。
まずは、2 行目で入力される文字列の数を表す整数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。出力は拡張 for 文を用いると簡潔に書けます。
next メソッドは、空白文字区切りで入力を受け取るので、前問と同様のコードで解けます。*/

final 1行目で与えられるN個の文字列の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        for (String t : s) {
            System.out.println(t);
        }

        sc.close();
    }
}
/*まず N を受け取ります。
N 個の文字列が入る配列を用意し、N 個の文字列をループを用いて受け取ります。s_1 から s_N までループを用いて出力します。
まずは、入力される文字列 s の数を表す整数 n を受け取ります。
その後、要素数 n の配列を用意して、for 文でそれぞれ代入していきます。出力は拡張 for 文を用いると簡潔に書けます。
next メソッドは、空白文字区切りで入力を受け取るので、前問と同様のコードで解けます。*/

// 【N個の文字列の入力】1行目で与えられるN個の実数の入力 (large)
step1 改行区切りでのN個の実数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextDouble();
        }

        for (double r : a) {
            System.out.println(r);
        }

        sc.close();
    }
}
/*まず整数 N を受け取ります。浮動小数点数型の配列を用意し、N 個の実数を受け取ります。
まず、2 行目以降で入力される実数の数を表す整数 n を受け取ります。次に、要素数 n の配列を用意して、for 文の中で代入していきます。
実数値の受け取りは Scanner クラスの nextDouble メソッドを使います。nextDoubleメソッド は next メソッドや nextInt メソッド同様のルールで入力を受け取ります。
Java では、実数を扱うときは基本的に double 型が使われます。出力は拡張 for 文を用いると、簡潔に書けます。ループを用いて a_1 から a_N までを出力します。*/

step2 2行目で与えられるN個の実数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextDouble();
        }

        for (double r : a) {
            System.out.println(r);
        }

        sc.close();
    }
}
/*まず整数 N を受け取ります。浮動小数点数型の配列を用意し、N 個の実数をループを用いて受け取ります。
ループを用いて a_1 から a_N まで出力します。
まず、2 行目で入力される実数の数を表す整数 n を受け取ります。次に、要素数 n の配列を用意して、for 文の中で代入していきます。
Java では、実数を扱うときは基本的に double 型が使われます。出力は拡張 for 文を用いることで、簡潔に書けます。
nextDoubleメソッド は next メソッドや nextInt メソッド同様のルールで入力を受け取るので、前問と同様のコードで解けます。*/

step3 1行目で与えられるN個の実数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextDouble();
        }

        for (double r : a) {
            System.out.println(r);
        }

        sc.close();
    }
}
/*まず N を受け取ります。N 個の実数が入る配列を用意し、N 個の実数をループを用いて受け取ります。
ループを用いて a_1 から a_N まで出力します。
まず、入力される実数 a の数を表す整数 n を受け取ります。次に、要素数 n の配列を用意して、for 文の中で代入していきます。
Java では、実数を扱うときは基本的に double 型が使われます。出力は拡張 for 文を用いることで、簡潔に書けます。
nextDoubleメソッド は next メソッドや nextInt メソッド同様のルールで入力を受け取るので、前問と同様のコードで解けます。*/

step4 2行目で与えられるN個の実数の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextDouble();
        }

        for (double r : a) {
            System.out.println(r);
        }

        sc.close();
    }
}
/*まず整数 N を受け取ります。浮動小数点数型の配列を用意し、N 個の実数をループを用いて受け取ります。
ループを用いて a_1 から a_N まで出力します。まず、2 行目で入力される実数の数を表す整数 n を受け取ります。
次に、要素数 n の配列を用意して、for 文の中で代入していきます。Java では、実数を扱うときは基本的に double 型が使われます。
出力は拡張 for 文を用いることで、簡潔に書けます。nextDoubleメソッド は next メソッドや nextInt メソッド同様のルールで入力を受け取るので、前問と同様のコードで解けます。*/

final 1行目で与えられるN個の実数の入力 (large)
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        double[] a = new double[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextDouble();
        }

        for (double r : a) {
            System.out.println(r);
        }

        sc.close();
    }
}
/*まず N を受け取ります。N 個の実数が入る配列を用意し、N 個の実数をループを用いて受け取ります。
ループを用いて a_1 から a_N まで出力します。まず、入力される実数 a の数 を表す整数 n を受け取ります。
次に、要素数 n の配列を用意して、for 文の中で代入していきます。Java では、実数を扱うときは基本的に double 型が使われます。
出力は拡張 for 文で書くことで、簡潔に書けます。nextDoubleメソッド は next メソッドや nextInt メソッド同様のルールで入力を受け取るので、前問と同様のコードで解けます。*/

// 【組になったデータの入力】文字列と整数の組からの選択
step1 1つの整数の組の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        int b = sc.nextInt();

        System.out.println(a + " " + b);

        sc.close();
    }
}
/*整数 a と b を受け取ります。a と b をそのまま出力します。
Scanner クラスの nextIntメソッド を使います。
このメソッドは next メソッド同様のルールで入力を受け取ります。
従って、今回は 2 回 nextInt メソッドを使うことで、すべての入力値を受け取ることができます。
半角スペース区切りで出力するためには、幾つか方法がありますが、今回は + を用いて a と b を半角スペース区切りで出力しています。
+ は左結合 (下で説明) で、文字列と数値を結合しようとするとき、数値は文字列に変換されてから結合されます。
【 「左結合」とは何か 】
演算子の左側と右側どちらを先に処理するかを意味する、左結合、右結合、という用語があります。
左結合は演算子の左側を先に処理します。
演算子 + は A + B + C を (A + B) + C として処理する左結合の演算子です。
因みに、右結合の演算子の例としては = が挙げられます。
A = B = C は A = (B = C) のように演算される (C に A の値が代入されるのではなく、A に C の値が代入される) ので、右結合です。*/

step2 N組の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            System.out.println(a[i] + " " + b[i]);
        }

        sc.close();
    }
}
/*整数 N を受け取ります。ループを用いて、a_i と b_i を受け取ります。a_i と b_i をループを用いて改行区切りで出力します。
まず、2 行目以降に入力される整数組 を表す整数 n を受け取ります。
続く n 行の各行の入力は a_i b_i の形式なので、nextInt メソッドで a_i, b_i の順に受け取ります。
今回、出力すべき要素を持った配列が 2 つあるので、拡張 for 文を使うより、普通の for 文で i=0 から i=n-1 まで繰り返し処理をした方が簡潔に書けます。*/

step3 整数の組からの選択
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
        }

        System.out.println(a[7] + " " + b[7]);

        sc.close();
    }
}
/*整数 N を受け取ります。ループを用いて、a_i と b_i を受け取ります。a_8 と b_8 を出力します。
まず、2 行目以降で入力される整数組の数を表す整数 n を受け取ります。
続く n 行の各行の入力は a_i b_i の形式なので、nextInt メソッドで a_i, b_i の順で受け取ります。
8 番目の要素を出力するとき、配列のインデックスが 0 から始まることに注意が必要です。
n が 8 以上であることが問題文で保証されているので、配列外参照 (ArrayIndexOutOfBoundsException) を気にする必要はありません。*/

step4 文字列と整数の組の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
            a[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            System.out.println(s[i] + " " + a[i]);
        }

        sc.close();
    }
}
/*整数 N を受け取ります。ループを用いて、s_i と a_i を受け取ります。s_i と a_i をループを用いて改行区切りで出力します。
まず、2 行目以降で入力される値の組の数を表す整数 n を受け取ります。
続く n 行の各行の入力は s_i a_i の形式なので、next〇〇 メソッドで受け取る入力値の順は s_i, a_i です。
つまり、今回は next メソッド、nextInt メソッドの順で受け取り、それぞれ適切な配列に代入することで、正常に入力を受け取れます。
今回、出力すべき要素を持った配列が 2 つあるので、拡張 for 文を使うより、普通の for 文で i=0 から i=n-1 まで繰り返し処理をした方が簡潔に書けます。*/

final 文字列と整数の組からの選択
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        String[] s = new String[n];
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
            a[i] = sc.nextInt();
        }

        System.out.println(s[7] + " " + a[7]);

        sc.close();
    }
}
/*整数 N を受け取ります。ループを用いて、s_i と a_i を受け取ります。s_8 と a_8 を出力します。
まず、2 行目以降に入力される値の組の数を表す整数 n を受け取ります。
続く n 行の各行の入力は s_i a_i の形式なので、next〇〇 メソッドで受け取る入力値の順は s_i, a_i です。
つまり、今回は next メソッド、nextInt メソッドの順で受け取り、それぞれ適切な配列に代入することで、正常に入力を受け取れます。
8 番目の要素を出力するとき、配列のインデックスが 0 から始まることに注意が必要です。
n が 8 以上であることが問題文で保証されているので、配列外参照 (ArrayIndexOutOfBoundsException) を気にする必要はありません。*/

// 【N 行 M 列のデータの入力】行ごとに要素数の異なる整数列の入力
step1 3行3列の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[][] a = new int[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(a[i][j]);
                if (j < 2) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }

        sc.close();
    }
}
/*3 行 3 列の行列を二次元配列と二重ループを用いて受け取ります。
二次元配列と二重ループを用いて 3 行 3 列の形で出力します。1 列のデータを管理するときは、1 次元配列で十分ですが、横に加えて縦にも連なるデータを管理するときは、2 次元配列を使うと便利です。
2 重ループで入力を 2 次元配列に代入していきます。
nextInt メソッドは、入力を空白文字区切りで受け取るので、今回の場合は 2 重ループ内で 9 回使われる様に記述します。
出力も 2 重ループを用います。
拡張 for 文だと「改行の問題」「空白の問題」の 2 つの問題があるので、今回は普通の for 文で書くことで簡潔に書きます。
どこで改行するか、どこで空白を入れるか、は上記のコードで j に注目して判定すれば上手くいきます。
配列のインデックスは 0 から始まることに注意して if 文を書いて下さい。*/

step2 N行3列の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[][] a = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(a[i][j]);
                if (j < 2) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }

        sc.close();
    }
}
/*2 重ループで入力を 2 次元配列に代入していきます。
2 重ループを作る際、外側のループが「縦」、内側のループが「横」、と意識して考えると考えやすいです。
nextInt メソッドは、入力を空白文字区切りで受け取るので、今回の場合は 2 重ループ内で n*3 回使われる様に記述します。
出力も 2 重ループを用います。
拡張 for 文だと「改行の問題」「空白の問題」の 2 つの問題があるので、今回は普通の for 文で書くことで簡潔に書きます。
どこで改行するか、どこで空白を入れるか、は上記のコードで j に注目して判定すれば上手くいきます。
配列のインデックスは 0 から始まることに注意して if 文を書いて下さい。*/

step3 3行M列の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int m = sc.nextInt();

        int[][] a = new int[3][m];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(a[i][j]);
                if (j < m - 1) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }

        sc.close();
    }
}
/*整数 M を受け取ります。3 行 M 列の行列を二次元配列と二重ループを用いて受け取ります。
二次元配列と二重ループを用いて 3 行 M 列の形で出力します。2 重ループで入力を 2 次元配列に代入していきます。
2 重ループを作る際、外側のループが「縦」、内側のループが 「横」、と意識して考えると考えやすいです。
nextInt メソッドは、入力を空白文字区切りで受け取るので、今回の場合は 2 重ループ内で 3*m 回使われる様に記述します。出力も 2 重ループを用います。
拡張 for 文だと「改行の問題」「空白の問題」の 2 つの問題があるので、今回は普通の for 文で書くことで簡潔に書きます。
どこで改行するか、どこで空白を入れるか、は上記のコードで j に注目して判定すれば上手くいきます。
配列のインデックスは 0 から始まることに注意して if 文を書いて下さい。*/

step4 N行M列の整数の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();

        int[][] a = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(a[i][j]);
                if (j < m - 1) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }

        sc.close();
    }
}
/*整数 N と整数 M を受け取ります。N 行 M 列の行列を二次元配列と二重ループを用いて受け取ります。二次元配列と二重ループを用いて N 行 M 列の形で出力します。
2 重ループで入力を 2 次元配列に代入していきます。
2 重ループを作る際、外側のループが「縦」、内側のループが「横」、と意識して考えると考えやすいです。
nextInt メソッドは、入力を空白文字区切りで受け取るので、今回の場合は 2 重ループ内で n*m 回使われる様に記述します。
出力も 2 重ループを用います。
拡張 for 文だと「改行の問題」「空白の問題」の 2 つの問題があるので、今回は普通の for 文で書くことで簡潔に書きます。
どこで改行するか、どこで空白を入れるか、は上記のコードで j に注目して判定すれば上手くいきます。
配列のインデックスは 0 から始まることに注意して if 文を書いて下さい。*/

final 行ごとに要素数の異なる整数列の入力
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            int m = sc.nextInt();
            for (int j = 0; j < m; j++) {
                int a = sc.nextInt();

                System.out.print(a);
                if (j < m - 1) {
                    System.out.print(" ");
                } else {
                    System.out.println();
                }
            }
        }

        sc.close();
    }
}
/*整数 N を受け取ります。各行の先頭にある整数 M を受け取ります。
M 個の整数を受け取ります。受け取った整数を出力します。
今回は行ごとに入力される数列の要素数が異なるので、2 次元配列では管理できません。
そこで、今回は配列で受け取らずに、受け取った値をそのまま出力することを考えます。
まず、2 行目以降に入力される値の行数を表す整数 n を受け取ります。
そこから n 行に亘っての入力は for 文で処理します。
行の先頭で 入力される整数 a の数を表す整数 m_i が与えられるので、これを元に for 文を作ります。
m_i 回繰り返す for 文内で a_ij を受け取り、出力します。
どこで改行するか、どこで空白を入れるか、は上記のコードで j に注目して判定すれば上手くいきます。
配列のインデックスは 0 から始まることに注意して if 文を書いて下さい。*/

