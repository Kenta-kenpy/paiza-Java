// paizaの森練習問題コンテスト過去問題1　★
// Q.　スポーツの人数
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String sport = scanner.nextLine().trim();
        scanner.close();
        
        // スポーツ名と人数のマップを作成
        Map<String, Integer> sportToPlayers = new HashMap<>();
        sportToPlayers.put("baseball", 9);
        sportToPlayers.put("soccer", 11);
        sportToPlayers.put("rugby", 15);
        sportToPlayers.put("basketball", 5);
        sportToPlayers.put("volleyball", 6);
        
        // 結果を出力
        System.out.println(sportToPlayers.get(sport));
    }
}
/*スポーツ名ごとに条件分岐をして，入力とスポーツ名が一致したらスポーツに対応した競技人数を表示します．*/

// Q.　バイトの休憩時間
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = Integer.parseInt(scanner.nextLine().trim());
        scanner.close();
        
        if (h > 8) {
            System.out.println("60 min");
        } else if (h > 6) {
            System.out.println("45 min");
        } else {
            System.out.println("no break");
        }
    }
}
/*勤務時間が6時間を超えて8時間以下の場合は「45 min」、8時間を超える場合は「60 min」、それ以外は「no break」を出力します。*/

// Q.　自動車の燃費
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v = scanner.nextInt(); // 給油量（L）
        int d = scanner.nextInt(); // 走行距離（km）
        scanner.close();
        
        int fuelEfficiency = d / v; // 燃費計算（小数点以下切り捨て）
        System.out.println(fuelEfficiency);
    }
}
/*給油量と走行距離を入力として受け取り、燃費を小数点以下切り捨てで出力するようにしました。*/

// Q.　背番号順
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // 入力される選手の数を読み取る
        int n = Integer.parseInt(scanner.nextLine().trim());
        
        // 選手情報を格納するリストを作成
        List<Player> players = new ArrayList<>();
        
        // n 人分の選手情報を読み取る
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            int number = Integer.parseInt(input[0]); // 背番号を取得
            String name = input[1]; // 選手名を取得
            players.add(new Player(number, name)); // リストに追加
        }
        scanner.close();
        
        // 背番号の昇順に並び替える
        players.sort(Comparator.comparingInt(p -> p.number));
        
        // ソート後の結果を出力
        for (Player player : players) {
            System.out.println(player.number + " " + player.name);
        }
    }
}

// 選手情報を保持するクラス
class Player {
    int number; // 背番号
    String name; // 選手名
    
    // コンストラクタ
    Player(int number, String name) {
        this.number = number;
        this.name = name;
    }
}
/*入力を [[背番号1，名前1], [背番号2，名前2], ...] という形で受け取ります． その配列を背番号によってソートし，ソート後の配列を出力します．
野球選手の背番号と名前を昇順に並び替えて出力する処理を実装しました。Player クラスを作成し、List と Comparator を用いたソートを行っています。*/

// paizaの森練習問題コンテスト過去問題2　★
// Q.　競輪のユニフォーム
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine().trim());
        scanner.close();

        String[] colors = {"white", "black", "red", "blue", "yellow", "green", "orange", "pink", "purple"};
        
        System.out.println(colors[n - 1]);
    }
}
/*colors の配列にあらかじめ、番号順に対応する色を格納します。
入力を受け取り n - 1 を出力することで、解を導くことができます。*/

// Q.　エレベーターの行き先
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String f1 = scanner.next(); // 現在の階
        String f2 = scanner.next(); // 移動したい階
        scanner.close();
        
        // "F" を取り除き数値に変換
        int currentFloor = Integer.parseInt(f1.replace("F", ""));
        int targetFloor = Integer.parseInt(f2.replace("F", ""));
        
        // 比較して出力
        if (currentFloor < targetFloor) {
            System.out.println("up");
        } else {
            System.out.println("down");
        }
    }
}
/*f1, f2 の１文字目について大小比較を行います。
f2 の方が大きければ、up、そうれなければ down を出力することで答えを導くことができます。*/

// Q.　長方形の面積
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 入力を受け取る
        int e1 = scanner.nextInt();
        int e2 = scanner.nextInt();
        scanner.close();
        
        // いずれかの辺が0なら "invalid" を出力
        if (e1 == 0 || e2 == 0) {
            System.out.println("invalid");
        } else {
            // 面積を計算して出力
            System.out.println(e1 * e2);
        }
    }
}
/*e1, e2 のうち、どちらかが 0 であれば invalid を出力します。そうでなければ、２つの値をかけて出力することで答えを導くことができます。*/

// Q.　セール販売
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int n = Integer.parseInt(scanner.nextLine()); // 購入アイテム数
        int totalPrice = 0;
        boolean hasPants = false;
        
        for (int i = 0; i < n; i++) {
            String[] item = scanner.nextLine().split(" ");
            String category = item[0];
            int price = Integer.parseInt(item[1]);
            
            totalPrice += price;
            if (category.equals("pants")) {
                hasPants = true;
            }
        }
        
        scanner.close();
        
        // 割引の適用条件を満たす場合、500円引き
        if (hasPants && totalPrice >= 2000) {
            totalPrice -= 500;
        }
        
        System.out.println(totalPrice);
    }
}
/*bool型を持つ pants を初期値では False に設定しておき、入力 c に pants が含まれている場合には pants を True にします。
最終的に合計金額が 2000 円以上であり、かつ pants が True である場合に、合計金額から 500 円引くことで答えを導くことができました。*/

// paizaの森練習問題コンテスト過去問題3　★
// Q.　文字列の逆順
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine().trim(); // 改行を考慮してトリム
        scanner.close();
        
        String reversed = new StringBuilder(s).reverse().toString();
        System.out.println(reversed);
    }
}
/*Scanner を使用して標準入力から文字列を受け取る。
trim() を使って余分な空白や改行を削除。
StringBuilder の reverse() メソッドを使用して文字列を反転。
結果を System.out.println で出力。*/

// Q.　英単語の生成（連結）
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Scannerを使って標準入力を読み込む
        Scanner scanner = new Scanner(System.in);
        
        // 2つの文字列s1とs2をスペース区切りで入力として受け取る
        String s1 = scanner.next();
        String s2 = scanner.next();
        
        // 2つの文字列を連結して出力する
        System.out.println(s1 + s2);
        
        // スキャナーを閉じる
        scanner.close();
    }
}
/*Scannerを使用して標準入力から2つの文字列を受け取ります。
scanner.next()を使用することで、スペースで区切られた文字列をそれぞれString s1、String s2として取得します。
取得した文字列s1とs2を+演算子で連結し、System.out.println()でそのまま出力します。*/

// Q.　小文字にする
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // Scannerを使って入力を受け取る
        Scanner scanner = new Scanner(System.in);
        
        // 文字列を読み込む
        String s = scanner.nextLine();
        
        // 文字列を小文字に変換
        String result = s.toLowerCase();
        
        // 結果を出力
        System.out.println(result);
        
        // Scannerを閉じる
        scanner.close();
    }
}
/*Scannerを使って標準入力から文字列を受け取ります。
StringクラスのtoLowerCase()メソッドで、文字列のすべての大文字を小文字に変換します。
結果を標準出力に出力します。*/

// Q.　キーボードのシミュレーション
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 入力の数nを取得
        int n = sc.nextInt();
        sc.nextLine(); // 改行を読み飛ばし
        
        boolean capslock = false; // capslockの状態
        StringBuilder output = new StringBuilder();
        
        for (int i = 0; i < n; i++) {
            String input = sc.nextLine().trim();
            
            if (input.equals("capslock")) {
                // capslockが押された場合、状態を反転
                capslock = !capslock;
            } else if (input.startsWith("shift")) {
                // shift+キーの場合
                char key = input.charAt(6); // 7文字目（index 6）を取り出す
                if (capslock) {
                    // capslockが有効な場合は、小文字に変換
                    output.append(Character.toLowerCase(key));
                } else {
                    // 通常は大文字
                    output.append(Character.toUpperCase(key));
                }
            } else {
                // 普通のキー入力（小文字）
                char key = input.charAt(0);
                if (capslock) {
                    // capslockが有効な場合は大文字に変換
                    output.append(Character.toUpperCase(key));
                } else {
                    // 小文字のままで出力
                    output.append(key);
                }
            }
        }
        
        // 結果を出力
        System.out.println(output.toString());
        
        sc.close();
    }
}
/*nを読み込み、次に押されたキーの入力を順に処理します。
capslockの状態を管理するためのブール変数を用意します。capslockが押されると、この状態を反転させます。
shiftキーが押されると、その後に続くキーは大文字になります。shift+xのような入力を処理しています。
普通のキー（aからz）は、そのまま小文字として処理します。ただし、capslockが有効な場合は、大文字に変換されます。
最終的な文字列を作成し、出力します。*/

// Q.  ラッキーナンバー
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // 入力の受け取り
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }

        // 組み合わせを保存するリスト
        List<List<Integer>> allCombinations = new ArrayList<>();

        // 全ての組み合わせを列挙
        findCombinations(numbers, 0, new ArrayList<>(), allCombinations);

        // 足して777になる組み合わせを検索
        List<String> validCombinations = new ArrayList<>();
        for (List<Integer> combination : allCombinations) {
            int sum = 0;
            for (int num : combination) {
                sum += num;
            }
            if (sum == 777) {
                combination.sort(Integer::compareTo);  // 昇順にソート
                validCombinations.add(combination.toString().replaceAll("[\\[\\],]", ""));
            }
        }

        // 結果の出力
        if (validCombinations.size() == 0) {
            System.out.println("no answer");
        } else if (validCombinations.size() == 1) {
            System.out.println(validCombinations.get(0));
        } else {
            System.out.println("multiple answers");
        }
    }

    // 再帰的に組み合わせを探すメソッド
    private static void findCombinations(int[] numbers, int start, List<Integer> current, List<List<Integer>> allCombinations) {
        allCombinations.add(new ArrayList<>(current));  // 現在の組み合わせを追加
        for (int i = start; i < numbers.length; i++) {
            current.add(numbers[i]);
            findCombinations(numbers, i + 1, current, allCombinations);  // 次の組み合わせを探索
            current.remove(current.size() - 1);  // 最後の要素を削除して次の探索
        }
    }
}
/*入力の読み込み
n と与えられた数 x_1, x_2, ..., x_n を numbers 配列に格納します。
組み合わせの列挙
findCombinations メソッドは、再帰的に numbers 配列からすべての部分集合（組み合わせ）を求めます。
組み合わせを allCombinations リストに追加します。
777になる組み合わせの探索
allCombinations から各組み合わせの和を計算し、777になるものを validCombinations に保存します。
各組み合わせを昇順にソートし、出力用にリストに追加します。
結果の出力
validCombinations が空であれば "no answer" と出力します。
一つの組み合わせしかなければ、その組み合わせを出力します。
複数の組み合わせがあれば "multiple answers" と出力します。*/

// paizaの森練習問題コンテスト過去問題4　★
// Q.　花言葉
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // 花の名前と花言葉をマッピング
        Map<String, String> flowerMap = new HashMap<>();
        flowerMap.put("rose", "I love you");
        flowerMap.put("cosmos", "harmony");
        flowerMap.put("tulip", "perfect lover");
        flowerMap.put("hydrangea", "heartlessness");
        flowerMap.put("jasmine", "amiability");

        // 標準入力から花の名前を取得
        Scanner scanner = new Scanner(System.in);
        String flowerName = scanner.nextLine().trim();
        scanner.close();

        // 花の名前に対応する花言葉を出力
        System.out.println(flowerMap.get(flowerName));
    }
}
/*HashMap の使用:
花の名前とその花言葉を HashMap<String, String> に格納。
キーとして花の名前、値として花言葉を保存。
入力の取得:
Scanner を使用して標準入力から花の名前を取得。
trim() を用いて余分な空白や改行を削除。
出力:
入力された花の名前をキーとして HashMap から対応する花言葉を取得し、出力。*/

// Q.　じゃんけん
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        char h = sc.next().charAt(0);

        if (h == 'R') {
            System.out.println('P');
        } else if (h == 'P') {
            System.out.println('S');
        } else if (h == 'S') {
            System.out.println('R');
        }
    }
}
/*入力された相手の手 h に勝つ手を出力します． G なら P P なら S S なら G です．*/

// Q.　四季
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int m = sc.nextInt();

        if (3 <= m && m <= 5) {
            System.out.println("spring");
        } else if (6 <= m && m <= 8) {
            System.out.println("summer");
        } else if (9 <= m && m <= 11) {
            System.out.println("autumn");
        } else {
            System.out.println("winter");
        }
    }
}

// Q.　オルタネーティングキャップス
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String answer = s.toLowerCase();

        System.out.println(answer);
    }
}
/*入力された月によって，条件分岐をすることを考えます．*/

// Q.  パワー100倍
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String p = sc.next();
        System.out.println(p + "00");
    }
}

// Q.  おつり
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int p = sc.nextInt();
        int[] coins = { 500, 100, 50, 10, 5, 1 };

        int answer = 0;
        for (int c : coins) {
            while (p >= c) {
                p -= c;
                answer++;
            }
        }

        System.out.println(answer);
    }
}
/*500円，100円，50円，10円，5円，1円と金額の大きい硬貨からお釣りの値段を越さない限り払う方法が，払う硬貨の数を最小にします．例えば500円のおつりを払うとき，500円玉だったら1枚で払うことができますが，500円玉以外の硬貨だと1枚より多い枚数を出さないといけません．
500円玉で払うのが最小です．また，お釣りが500円を下回ると500円玉で払うことはできないため，100円玉などの硬貨で，お釣りの金額を越さないできるだけ金額の大きい硬貨で払う方法が最小です．金額の大きい硬貨からお釣りの値段を越さない限り払う方法が，払う硬貨の数を最小にします．*/

// Q.  ゾロ目
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        System.out.println(x / 11 * 11);
    }
}
/*食べることができる大豆は11の倍数です．よって，大豆の数を11で割った商を求めて，11倍したものが答えです．*/

// Q.  いちばんお得
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int g1 = sc.nextInt();
        int p1 = sc.nextInt();
        int g2 = sc.nextInt();
        int p2 = sc.nextInt();

        if (p1 * g2 < p2 * g1) {
            System.out.println(1);
        } else {
            System.out.println(2);
        }
    }
}
/*入力を受け取って，グラム当たりの重さを比較します．*/

// Q.  重さの計算
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int k = sc.nextInt();
        int x = sc.nextInt();

        System.out.println(x * n / k);
    }
}
/*1 個当たりの重さは [x/k] となり，それに n をかけることでn個分のボールの重さになります．*/

// Q.  寒暖差
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int bef = sc.nextInt();
        for (int i = 0; i < 9; i++) {
            int now = sc.nextInt();
            if (Math.abs(now - bef) >= 3) {
                System.out.println("Yes");
                System.exit(0);
            }
            bef = now;
        }

        System.out.println("No");
    }
}
/*入力を受け取って1日前の気温と3℃以上差があったら Yes , それ以外の時 No と出力します．*/

// paizaの森練習問題コンテスト過去問題5　★
// Q.　3割打者
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int m = sc.nextInt();
        if (10 * m >= 3 * n) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.　テレワーク可能か
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int a = sc.nextInt();
        String b = sc.next();

        if (a >= 30 || b.equals("rainy")) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.　文字列の反転
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String s = sc.next();
        String reversed = new StringBuffer(s).reverse().toString();

        System.out.println(reversed);
    }
}

// Q.　CD
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int seconds = 0;
        for (int i = 0; i < n; i++) {
            int m = sc.nextInt(), s = sc.nextInt();
            seconds += 60 * m + s;
        }

        if (seconds <= 74 * 60) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.　サイクルヒット
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int seconds = 0;
        for (int i = 0; i < n; i++) {
            int m = sc.nextInt(), s = sc.nextInt();
            seconds += 60 * m + s;
        }

        if (seconds <= 74 * 60) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.  条件を満たす最小の整数
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        int y = sc.nextInt();
        int z = sc.nextInt();

        while (x % y != z) {
            x++;
        }

        System.out.println(x);
    }
}

// paizaの森練習問題コンテスト過去問題6　★
// Q.　球数制限
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int k = sc.nextInt();
        int sum = 0;

        for (int i = 0; i < n; i++) {
            int m = sc.nextInt();
            sum += m;
        }
        if (sum < k) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.　最大イニング
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int k = sc.nextInt();
        int sum = 0;

        for (int i = 1; i <= 9; i++) {
            int m = sc.nextInt();
            sum += m;
            if (sum > k) {
                System.out.println(i);
                return;
            }
        }
        System.out.println("Yes");
    }
}

// Q.　ロボットの移動
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        int y = sc.nextInt();
        System.out.println(Math.abs(x) + Math.abs(y));
    }
}

// Q.　最大の差
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] v = new int[5];

        for (int i = 0; i < 5; i++) {
            int m = sc.nextInt();
            v[i] = m;
        }

        Arrays.sort(v);
        System.out.println(v[4] - v[0]);
    }
}

// Q.  中央値
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int[] v = new int[5];

        for (int i = 0; i < 5; i++) {
            int m = sc.nextInt();
            v[i] = m;
        }

        Arrays.sort(v);
        System.out.println(v[5 / 2]);
    }
}

// Q.  採点
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int sum = 0;

        for (int i = 0; i < n; i++) {
            String m = sc.next();
            if (m.equals("correct")) {
                sum += 2;
            } else if (m.equals("incorrect")) {
                sum--;
            }
        }
        System.out.println(sum);
    }
}

// paizaの森練習問題コンテスト過去問題7　★
// Q.　占い
import java.util.*;
import javax.lang.model.util.ElementScanner6;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        if (n == 7) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

// Q.　年収計算
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();

        System.out.println(a + c / 5 * b);
    }
}

// Q.　気温
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        if (x >= 35) {
            System.out.println("extremely hot day");
        } else if (x >= 30) {
            System.out.println("hot summer day");
        } else if (x >= 25) {
            System.out.println("summer day");
        } else if (x < 0) {
            System.out.println("ice day");
        } else {
            System.out.println("normal day");
        }
    }
}

// Q.　気温2
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int max_val = -21, min_val = 41;
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
            if (x[i] > max_val) {
                max_val = x[i];
            }
            if (x[i] < min_val) {
                min_val = x[i];
            }
        }
        System.out.println(max_val - min_val);
    }
}

// Q.  ブロックの埋め込み
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        System.out.println(n * m / 2);
    }
}

// Q.  最も大きな最大公約数
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        System.out.println(n / 2);
    }
}

// Q.　三冠王
import java.util.*;
import javax.lang.model.util.ElementScanner6;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        double[] b = new double[n];
        int[] r = new int[n];
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextDouble();
            r[i] = sc.nextInt();
            h[i] = sc.nextInt();
        }
        int[] flag = new int[n];
        Arrays.fill(flag, 0);
        double max_b = 0;
        for (int i = 0; i < n; i++) {
            max_b = Math.max(max_b, b[i]);
        }
        int max_r = 0;
        for (int i = 0; i < n; i++) {
            max_r = Math.max(max_r, r[i]);
        }
        int max_h = 0;
        for (int i = 0; i < n; i++) {
            max_h = Math.max(max_h, h[i]);
        }
        for (int i = 0; i < n; i++) {
            if (b[i] == max_b) {
                flag[i]++;
            }
            if (r[i] == max_r) {
                flag[i]++;
            }
            if (h[i] == max_h) {
                flag[i]++;
            }
        }
        int max_flag = 0;
        for (int i = 0; i < n; i++) {
            max_flag = Math.max(max_flag, flag[i]);
        }
        if (max_flag == 3) {
            System.out.println("Triple");
        } else if (max_flag == 2) {
            System.out.println("Double");
        } else {
            System.out.println("Nobody");
        }
    }
}

// paizaの森練習問題コンテスト過去問題8　★
// Q.　文字数カウント
// Q.　乗客人数
// Q.　通貨レート
// Q.　乗客人数その2
// Q.  OPSその2
// Q.  タスクスケジューリング

// paizaの森練習問題コンテスト過去問題9　★
// Q.　最大値と最小値
// Q.　卵の生産
// Q.　卵の生産の最大量
// Q.　卵の生産の最大量 その2
// Q.  卵をぴったり生産

// paizaの森練習問題コンテスト過去問題10　★
// Q.　座席
// Q.　平均と平均
// Q.　親と子
// Q.　卒論締め切り
// Q.  WBC
// Q.  paizaとタイピング

// paizaの森練習問題コンテスト過去問題11　★
// Q.　お菓子の合計金額
// Q.　フィボナッチ数列
// Q.　素数判定
// Q.　残業時間
// Q.  ロボットの移動-その2
// Q.  辞書順で最も小さい文字列
// Q.  全員が正当

// paizaの森練習問題コンテスト過去問題12　★
// Q.　文字列の一致
// Q.　部分文字列
// Q.　グラフの連結
// Q.　拡張子
// Q.　日程調整

// paizaの森練習問題コンテスト過去問題13　★
// Q.　先頭が一致
// Q.　合計と平均
// Q.　二等辺三角形
// Q.　飽き性
// Q.　占い その2
// Q.  連結判定

// paizaの森練習問題コンテスト過去問題14　★
// Q.　回文
// Q.　区間の三分割
// Q.　割り切れる数の個数
// Q.　パイプを切る
// Q.　好みのピザ
// Q.  家計の収支
// Q.  野球世界大会 1 次ラウンドの順位

// paizaの森練習問題コンテスト過去問題15　★
// Q.　出力の練習
// Q.　red があるか調べてみよう
// Q.　階乗
// Q.　単語のカウント
// Q.　倍数の存在
// Q.  全員が不正答

// paizaの森練習問題コンテスト過去問題16　★
// Q.　3つの数
// Q.　税込価格
// Q.　パターン検出
// Q.　連続ホームラン
// Q.　辞書順で 3 番目に小さい文字列
// Q.  村人の友好関係(easy)

// paizaの森練習問題コンテスト過去問題17　★
// Q.　最大値と最小値
// Q.  神経衰弱
// Q.  じゃんけん(忖度)
// Q.  n→10進法
// Q.  お菓子の価格帯
// Q.  ぴったり卵を生産 その2

// paizaの森練習問題コンテスト過去問題18　★
// Q.　値の整列
// Q.  シープラスプラスプラス
// Q.  大晦日
// Q.  背の順に並んでいるか
// Q.  遠足のお菓子
// Q.  陣取りゲーム

// paizaの森練習問題コンテスト過去問題19　★
// Q.  paiza2025
// Q.  ABCカウント
// Q.  円卓のk番目
// Q.  素数
// Q.  視界の広さ
// Q.  集合体の数
