// 文字列の出力
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println("paiza");
    }
}

// 文字列の受け取り
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        var sc = new Scanner(System.in);
        
        var s = sc.next();

        System.out.println(s);
    }
}

// i文字目の出力
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        var sc = new Scanner(System.in);
        
        var S = sc.next();
        var i = sc.nextInt();

        System.out.println(S.charAt(i - 1));
    }
}

// 文字列の文字数
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        var sc = new Scanner(System.in);
        
        var S = sc.next();
        
        //---------------------------------------------
        // 1. 文字列比較は equals メソッドでおこなう
        // if ("paiza".equals(S)) {
        //     System.out.println("YES");
        // } else {
        //     System.out.println("NO");
        // }
        //---------------------------------------------
        
        //---------------------------------------------
        // 2. Java7 からは switch でも文字列の比較が可能
        //    まｔ Java12 からは swtich 式としても利用可能
        System.out.println(
            switch (S) {
                case "paiza" -> "YES";
                default -> "NO";
            });
        //---------------------------------------------
    }
}

// 文字の検索
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        String S = sc.next();

        System.out.println(S.length());
    }
}

// 文字列の連結
import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        var n = sc.nextInt();
        
        // 1. 文字列連結
        var ans = "";
        for (var i = 0; i < n; i++) {
            ans += sc.next();
        }
        System.out.println(ans);
    }
}

// 部分文字列
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next();
        var i = sc.nextInt();
        var j = sc.nextInt();
        
        System.out.println(S.substring(i - 1, j));
    }
}

// 文字列の挿入
import java.util.*;

public class Main {
    public static void main(String... args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next();
        var T = sc.next();
        var N = sc.nextInt();

        //---------------------------------
        // 1. String#substring
        var ans = S.substring(0, N) + T + S.substring(N);
        System.out.println(ans);
        //---------------------------------
        
        //---------------------------------
        // 2. StringBuilder
        // var ans = new StringBuilder(S);
        // ans.insert(N, T);
        // System.out.println(ans);
        //---------------------------------
        
    }
}
/*文字列の指定の位置に文字列を挿入する関数を利用・実装して、今回の問題を解いてください。
文字列に文字を挿入するような操作（破壊的な操作）のできない言語であっても、文字を挿入する位置で元の文字列を分割したのち、それらを連結することで文字の挿入を再現することができます。
答えは次のような文字列になります。
元の文字列の挿入する位置より前の部分 + 挿入した文字 + 元の文字列の挿入する位置より後ろの部分*/

// 文字列の書き換え
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next();
        var i = sc.nextInt();
        var c = sc.next();

        //---------------------------------
        // 1. String#substring
        var ans = S.substring(0, i - 1) + c + S.substring(i);
        System.out.println(ans);
        //---------------------------------
        
        //---------------------------------
        // 2. StringBuilder
        // var ans = new StringBuilder(S);
        // ans.replace(i - 1, i, c);
        // System.out.println(ans);
        //---------------------------------
        
    }
}
/*文字列の文字を変更するような操作（破壊的な操作）のできない言語であっても、変更する文字の位置で元の文字列を分割したのち、それらを連結することで文字の挿入を再現することができます。
答えとなる文字列は次の通りになります。
元の文字列の変更する文字の位置より前の部分 + 変更した文字 + 元の文字列の変更する文字の位置より後ろの部分*/

// 文字列から数値への変換
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        //---------------------------------
        // 1. Integer#parseInt
        var S = sc.next();
        System.out.println(Integer.parseInt(S) - 813);
        //---------------------------------
        
        //---------------------------------
        // 2. Scanner
        // System.out.println(sc.nextInt() - 813);
        //---------------------------------
        
    }
}
/*文字列を数値に変換する関数を利用・実装することで、計算をおこなってください。*/

// 数値から文字列への変換
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var X = sc.nextInt();
        var Y = sc.nextInt();
        var N = sc.nextInt();
        
        System.out.println(String.valueOf(X + Y).charAt(N - 1));
    }
}
/*数値の各桁の数字を取り出す操作は大変になってしまうので、X + Y の結果を数値から文字列に変換するように考えましょう。*/

// 大文字から小文字への変換
import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        var S = sc.next();

        System.out.println(S.toLowerCase());
    }
}
/*文字列を小文字に変換する関数を利用・実装するなどするして変換を行います。*/

// 小文字から大文字への変換
import java.util.*;

public class Main {

    public static void main(String... args) {
        Scanner sc = new Scanner(System.in);

        var S = sc.next();

        System.out.println(S.toUpperCase());
    }
}
/*文字列を大文字に変換する関数を利用・実装するなどするして変換を行います。*/

// 大文字小文字の反転
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next().toCharArray();
        
        for (char c : S) {
            if (Character.isUpperCase(c)) {
                System.out.print(Character.toLowerCase(c));
            } else {
                System.out.print(Character.toUpperCase(c));
            }
        }
        
        System.out.println();
    }
}
/*各言語について、大文字小文字を判定・変換する関数などを利用・実装して変換を行ってください。*/

// 文字列の検索
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next();
        var T = sc.next();
        
        if (S.indexOf(T) == -1) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
/*部分文字列の検索の関数を利用・実装することで判定をおこなってください。
|S| < |T| のとき明らかに条件を満たさないことに注意してください。*/

// 文字列の反転
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = new StringBuilder(sc.next());

        System.out.println(S.reverse());
    }
}
/*文字列を反転させる関数を利用・実装することで、反転を行ってください。*/

// 回文判定
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        var S = sc.next();
        var T = (new StringBuilder(S)).reverse();

        if (S.equals(T.toString())) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
        
    }
}
/*回文は前から読んでも後ろから読んでも同じ文字列のことなので、元の文字列とそれを反転した文字列 が一致するとその文字列が回文であると判定することができます。
文字列を反転させる関数を利用・実装することで、元の文字列と反転後の文字列を比較することで回文か判定してください。*/
    
// 文字列の分割
import java.util.*;

public class Main {
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
        
        //-------------------------------------
        // 1. String#split
        var S = sc.next().split(",");
        for (var ele : S) {
            System.out.println(ele);
        }
        //-------------------------------------
        
        //-------------------------------------
        // 2. Scanner#useDelimiter
        // sc.useDelimiter(",");
        // while (sc.hasNext()) {
        //     System.out.println(sc.next());
        // }
        //-------------------------------------
    }
}
/*文字列分割の関数や、部分文字列の関数を実装・使用して区切った後の文字列を出力してください。
最後の要素の出力を忘れないようにしてください。*/
    
// 日時データの変換その1


// 日時データの変換その2


// 数値判定

    
// 重複の削除


// パスワード作成


// 表記の訂正

    
// 数式の計算(1桁)


// 数式の計算


// 巨大な数の足し算(繰り上がりなし)


// 巨大な数の足し算


// 巨大な数のかけ算
